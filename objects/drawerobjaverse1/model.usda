#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (-1.0278289135638403, 0.46155100268026383, 1.4431247529557891)
                double3 target = (5.114185207538893, 0.34295984552504144, -1.7943687706322657)
            }
            dictionary Right = {
                double3 position = (-5, 0, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 5, 0)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        string creator = "Three.js USDZExporter"
        dictionary omni_layer = {
            string authoring_layer = "./model.usda"
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "World" (
    prepend apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
)
{
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Xform "Xform_184"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "Object_184" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_109>
            uniform token physics:approximation = "convexDecomposition"
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            matrix4d xformOp:transform = ( (3, 0, 0, 0), (0, 3, 0, 0), (0, 0, 3, 0), (0, -0.58, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "Geometry" (
                prepend references = @./geometries/Geometry_183.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "convexDecomposition"
                bool physics:collisionEnabled = 1
            }

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body1 = </World/Xform_184/Object_184>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (0, -0.58, 0)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }
    }

    def Xform "Xform_275"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "Object_275" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_181>
            uniform token physics:approximation = "convexDecomposition"
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            matrix4d xformOp:transform = ( (-0.006296996335291738, 2.7755575615628914e-17, 0.24992068309196286, 0), (0.2499206830919593, -4.2146849232871375e-8, 0.006296996335291613, 0), (4.213347740145146e-8, 0.24999999999999645, 1.0615941736791257e-9, 0), (0.9130846301785936, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "Geometry" (
                prepend references = @./geometries/Geometry_231.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "convexDecomposition"
                bool physics:collisionEnabled = 1

                over "Object_Geometry"
                {
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.495603971894525e-15, -1.1173576286438447e-8, 0.06627774965790696)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/Xform_284/Object_284>
                rel physics:body1 = </World/Xform_275/Object_275>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (0.8897215, 0.09691271, 1.6338262e-8)
                point3f physics:localPos1 = (0.89353245, 0, 0)
                quatf physics:localRot0 = (-0.49366277, 0.48290908, 0.51652575, 0.5062579)
                quatf physics:localRot1 = (0.48831287, -0.48831296, -0.51142, -0.51142013)
            }
        }
    }

    def Xform "Xform_277"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "Object_277" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_183>
            uniform token physics:approximation = "convexDecomposition"
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            matrix4d xformOp:transform = ( (0.00044913486118830503, -1.3877787807814457e-17, 0.2499995965554274, 0), (0.2499995965554238, -4.2146849232871375e-8, -0.0004491348611882773, 0), (4.214678120395554e-8, 0.24999999999999642, -7.571843152476276e-11, 0), (0.9152528127042494, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "Geometry" (
                prepend references = @./geometries/Geometry_235.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "convexDecomposition"
                bool physics:collisionEnabled = 1

                over "Object_Geometry"
                {
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0.008016257127807621, 8.687029140475033e-8, -0.1671788749137109)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/Xform_284/Object_284>
                rel physics:body1 = </World/Xform_277/Object_277>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (0.8884886, 0.12967496, 2.1861565e-8)
                point3f physics:localPos1 = (0.89353245, 0, 0)
                quatf physics:localRot0 = (-0.5004489, 0.47589555, 0.5229947, 0.49955073)
                quatf physics:localRot1 = (0.48831287, -0.48831296, -0.51142, -0.51142013)
            }
        }
    }

    def "Materials"
    {
        def Material "Material_109" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_109/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 10
            float physics:restitution = 0.7
            float physics:staticFriction = 10

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0
                color3f inputs:diffuseColor.connect = </World/Materials/Material_109/Texture_15_diffuse.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 1
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_109.inputs:frame:stPrimvarName>
                float2 outputs:result
            }

            def Shader "Transform2d_diffuse" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_109/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_15_diffuse"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_15_ffffff.png@
                float2 inputs:st.connect = </World/Materials/Material_109/Transform2d_diffuse.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }
        }

        def Material "Material_180" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_180/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 10
            float physics:restitution = 0.7
            float physics:staticFriction = 10

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </World/Materials/Material_180/Texture_20_diffuse.outputs:rgb>
                float inputs:metallic.connect = </World/Materials/Material_180/Texture_23_metallic.outputs:b>
                normal3f inputs:normal.connect = </World/Materials/Material_180/Texture_19_normal.outputs:rgb>
                float inputs:occlusion.connect = </World/Materials/Material_180/Texture_23_occlusion.outputs:r>
                float inputs:opacity = 1
                float inputs:roughness.connect = </World/Materials/Material_180/Texture_23_roughness.outputs:g>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_180.inputs:frame:stPrimvarName>
                float2 outputs:result
            }

            def Shader "Transform2d_diffuse" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_180/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_20_diffuse"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_20_ffffff.png@
                float2 inputs:st.connect = </World/Materials/Material_180/Transform2d_diffuse.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_normal" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_180/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_19_normal"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_19.png@
                float2 inputs:st.connect = </World/Materials/Material_180/Transform2d_normal.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_occlusion" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_180/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_23_occlusion"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_23.png@
                float2 inputs:st.connect = </World/Materials/Material_180/Transform2d_occlusion.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_roughness" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_180/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_23_roughness"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_23.png@
                float2 inputs:st.connect = </World/Materials/Material_180/Transform2d_roughness.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_metallic" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_180/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_23_metallic"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_23.png@
                float2 inputs:st.connect = </World/Materials/Material_180/Transform2d_metallic.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }
        }

        def Material "Material_181" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_181/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 10
            float physics:restitution = 0.7
            float physics:staticFriction = 10

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </World/Materials/Material_181/Texture_21_diffuse.outputs:rgb>
                float inputs:metallic.connect = </World/Materials/Material_181/Texture_24_metallic.outputs:b>
                normal3f inputs:normal.connect = </World/Materials/Material_181/Texture_22_normal.outputs:rgb>
                float inputs:occlusion.connect = </World/Materials/Material_181/Texture_24_occlusion.outputs:r>
                float inputs:opacity = 1
                float inputs:roughness.connect = </World/Materials/Material_181/Texture_24_roughness.outputs:g>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_181.inputs:frame:stPrimvarName>
                float2 outputs:result
            }

            def Shader "Transform2d_diffuse" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_181/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_21_diffuse"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_21_ffffff.png@
                float2 inputs:st.connect = </World/Materials/Material_181/Transform2d_diffuse.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_normal" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_181/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_22_normal"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_22.png@
                float2 inputs:st.connect = </World/Materials/Material_181/Transform2d_normal.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_occlusion" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_181/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_24_occlusion"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_24.png@
                float2 inputs:st.connect = </World/Materials/Material_181/Transform2d_occlusion.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_roughness" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_181/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_24_roughness"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_24.png@
                float2 inputs:st.connect = </World/Materials/Material_181/Transform2d_roughness.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_metallic" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_181/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_24_metallic"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_24.png@
                float2 inputs:st.connect = </World/Materials/Material_181/Transform2d_metallic.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }
        }

        def Material "Material_182" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_182/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 10
            float physics:restitution = 0.7
            float physics:staticFriction = 10

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </World/Materials/Material_182/Texture_21_diffuse.outputs:rgb>
                float inputs:metallic.connect = </World/Materials/Material_182/Texture_24_metallic.outputs:b>
                normal3f inputs:normal.connect = </World/Materials/Material_182/Texture_22_normal.outputs:rgb>
                float inputs:occlusion.connect = </World/Materials/Material_182/Texture_24_occlusion.outputs:r>
                float inputs:opacity = 1
                float inputs:roughness.connect = </World/Materials/Material_182/Texture_24_roughness.outputs:g>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_182.inputs:frame:stPrimvarName>
                float2 outputs:result
            }

            def Shader "Transform2d_diffuse" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_182/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_21_diffuse"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_21_ffffff.png@
                float2 inputs:st.connect = </World/Materials/Material_182/Transform2d_diffuse.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_normal" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_182/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_22_normal"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_22.png@
                float2 inputs:st.connect = </World/Materials/Material_182/Transform2d_normal.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_occlusion" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_182/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_24_occlusion"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_24.png@
                float2 inputs:st.connect = </World/Materials/Material_182/Transform2d_occlusion.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_roughness" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_182/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_24_roughness"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_24.png@
                float2 inputs:st.connect = </World/Materials/Material_182/Transform2d_roughness.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_metallic" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_182/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_24_metallic"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_24.png@
                float2 inputs:st.connect = </World/Materials/Material_182/Transform2d_metallic.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }
        }

        def Material "Material_183" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_183/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 10
            float physics:restitution = 0.7
            float physics:staticFriction = 10

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </World/Materials/Material_183/Texture_21_diffuse.outputs:rgb>
                float inputs:metallic.connect = </World/Materials/Material_183/Texture_24_metallic.outputs:b>
                normal3f inputs:normal.connect = </World/Materials/Material_183/Texture_22_normal.outputs:rgb>
                float inputs:occlusion.connect = </World/Materials/Material_183/Texture_24_occlusion.outputs:r>
                float inputs:opacity = 1
                float inputs:roughness.connect = </World/Materials/Material_183/Texture_24_roughness.outputs:g>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_183.inputs:frame:stPrimvarName>
                float2 outputs:result
            }

            def Shader "Transform2d_diffuse" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_183/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_21_diffuse"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_21_ffffff.png@
                float2 inputs:st.connect = </World/Materials/Material_183/Transform2d_diffuse.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_normal" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_183/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_22_normal"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_22.png@
                float2 inputs:st.connect = </World/Materials/Material_183/Transform2d_normal.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_occlusion" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_183/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_24_occlusion"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_24.png@
                float2 inputs:st.connect = </World/Materials/Material_183/Transform2d_occlusion.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_roughness" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_183/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_24_roughness"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_24.png@
                float2 inputs:st.connect = </World/Materials/Material_183/Transform2d_roughness.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_metallic" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_183/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_24_metallic"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_24.png@
                float2 inputs:st.connect = </World/Materials/Material_183/Transform2d_metallic.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }
        }
    }

    def Xform "Xform_284"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "Object_284" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_180>
            uniform token physics:approximation = "convexDecomposition"
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            matrix4d xformOp:transform = ( (-0.011550493428792663, 1.3877787807814457e-17, 0.24973302965677446, 0), (0.2497330296567709, -4.2146849177360224e-8, 0.011550493428792483, 0), (4.210184138819795e-8, 0.2499999999999964, 1.9472676249243648e-9, 0), (0.8935324837689312, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "Geometry" (
                prepend references = @./geometries/Geometry_229.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "convexDecomposition"
                bool physics:collisionEnabled = 1
            }

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body1 = </World/Xform_284/Object_284>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (0.89353245, 0, 0)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (0.48831287, -0.48831296, -0.51142, -0.51142013)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }
    }

    def Xform "Xform_274"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "Object_274" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_182>
            uniform token physics:approximation = "convexDecomposition"
            bool physics:kinematicEnabled = 0
            bool physics:rigidBodyEnabled = 1
            matrix4d xformOp:transform = ( (-0.004963241304472121, 0, 0.2499507276159715, 0), (0.24995072761596795, -4.2146849232871375e-8, 0.00496324130447201, 0), (4.213854254420113e-8, 0.24999999999999645, 8.367399273456755e-10, 0), (0.9142607906860469, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "Geometry" (
                prepend references = @./geometries/Geometry_233.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "convexDecomposition"
                bool physics:collisionEnabled = 1
            }

            def PhysicsPrismaticJoint "PrismaticJoint"
            {
                uniform token physics:axis = "Y"
                rel physics:body0 = </World/Xform_274/Object_274>
                rel physics:body1 = </World/Xform_284/Object_284>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (0.27186316, -1.2754811, 1.6051874)
                point3f physics:localPos1 = (0.301561, -1.1850466, 1.6051874)
                quatf physics:localRot0 = (6.123234e-17, 0.00072431157, -4.4351292e-20, -0.99999976)
                quatf physics:localRot1 = (-0.01318169, -0.00072426314, -0.000009582765, 0.99991286)
                float physics:lowerLimit = -0.3
                float physics:upperLimit = 0
                float physxJoint:jointFriction = 1
            }
        }
    }
}

