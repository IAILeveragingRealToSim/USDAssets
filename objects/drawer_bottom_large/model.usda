#usda 1.0
(
    customLayerData = {
        string creator = "Three.js USDZExporter"
    }
    metersPerUnit = 1
    upAxis = "Y"
    defaultPrim = "World"
)

def Xform "World"(){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Object_163" (
		prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI"]
)
{
    matrix4d xformOp:transform = ( (0.6888337568985701, -0.0000356371536727418, 0.001993825194242817, 0), (0.0000015425738630230908, 0.018034623423721023, -0.0002105873193853457, 0), (-0.0013648130474905075, 0.005507132235646511, 0.47161885615652105, 0), (0, 0.03572548648570317, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    rel material:binding = </Materials/Material_107>

	bool physics:kinematicEnabled = 0
	bool physics:rigidBodyEnabled = 1
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_182.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexHull"
		bool physics:collisionEnabled = 1
	}

	
			def PhysicsFixedJoint "FixedJoint"
			{
				rel physics:body0 = </World/Object_163>
				rel physics:body1 = </World/Object_178>
				float physics:breakForce = inf
				float physics:breakTorque = inf
				point3f physics:localPos0 = (-0.1642365841806622, 8.27641771934582, 0.06410093741528111)
				point3f physics:localPos1 = (-0.1642365841806622, 8.27641771934582, 0.06410093741528111)
				quatf physics:localRot0 = (0.9999819101045946, -0.005838174687261539, -0.001447066780148331, -0.00003431648728965169)
				quatf physics:localRot1 = (1, 0, 0, 0)
			}
			
}

def Xform "Object_173" (
		prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI"]
)
{
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.1259900237903943, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    rel material:binding = </Materials/Material_121>

	bool physics:kinematicEnabled = 0
	bool physics:rigidBodyEnabled = 1
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_196.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexHull"
		bool physics:collisionEnabled = 1
	}

	
}

def Xform "Object_178" (
		prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI"]
)
{
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    rel material:binding = </Materials/Material_129>

	bool physics:kinematicEnabled = 0
	bool physics:rigidBodyEnabled = 1
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_205.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexHull"
		bool physics:collisionEnabled = 1
	}

	
		def PhysicsPrismaticJoint "PrismaticJoint"
		{
			uniform token physics:axis = "Y"
			rel physics:body0 = </World/Object_178>
			rel physics:body1 = </World/Object_173>
			float physics:breakForce = inf
			float physics:breakTorque = inf
			point3f physics:localPos0 = (0.0574636871447784, 0.6785475386459341, 0.006441988050937653)
			point3f physics:localPos1 = (0.0574636871447784, 0.6785475386459341, 0.006441988050937653)
			quatf physics:localRot0 = (0.7105921641131047, 0, 0, -0.7036041332319293)
			quatf physics:localRot1 = (0.7105921641131047, 0, 0, -0.7036041332319293)
			float physics:lowerLimit = -0.18519526250627577
			float physics:upperLimit = 0.18519526250627577
		}
		
}

def Xform "Object_179" (
		prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI"]
)
{
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.13837790153513974, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    rel material:binding = </Materials/Material_131>

	bool physics:kinematicEnabled = 0
	bool physics:rigidBodyEnabled = 1
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_206.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexHull"
		bool physics:collisionEnabled = 1
	}

	
}

}
def "Materials"
{

    def Material "Material_107"
    {
        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1, 1, 1)
            float inputs:roughness = 0.25
            float inputs:metallic = 0
            float inputs:opacity = 1
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }

        token outputs:surface.connect = </Materials/Material_107/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"

        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </Materials/Material_107.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }



    }

    def Material "Material_121"
    {
        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor.connect = </Materials/Material_121/Texture_15_diffuse.outputs:rgb>
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:opacity = 1
            float inputs:clearcoat = 0
            float inputs:clearcoatRoughness = 0
            float inputs:ior = 1.4500000476837158
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }

        token outputs:surface.connect = </Materials/Material_121/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"

        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </Materials/Material_121.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }


        def Shader "Transform2d_diffuse" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </Materials/Material_121/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_15_diffuse"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_15_ffffff.png@
            float2 inputs:st.connect = </Materials/Material_121/Transform2d_diffuse.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

    }

    def Material "Material_129"
    {
        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor.connect = </Materials/Material_129/Texture_15_diffuse.outputs:rgb>
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:opacity = 1
            float inputs:clearcoat = 0
            float inputs:clearcoatRoughness = 0
            float inputs:ior = 1.4500000476837158
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }

        token outputs:surface.connect = </Materials/Material_129/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"

        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </Materials/Material_129.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }


        def Shader "Transform2d_diffuse" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </Materials/Material_129/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_15_diffuse"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_15_ffffff.png@
            float2 inputs:st.connect = </Materials/Material_129/Transform2d_diffuse.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

    }

    def Material "Material_131"
    {
        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor.connect = </Materials/Material_131/Texture_15_diffuse.outputs:rgb>
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:opacity = 1
            float inputs:clearcoat = 0
            float inputs:clearcoatRoughness = 0
            float inputs:ior = 1.4500000476837158
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }

        token outputs:surface.connect = </Materials/Material_131/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"

        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </Materials/Material_131.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }


        def Shader "Transform2d_diffuse" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </Materials/Material_131/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_15_diffuse"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_15_ffffff.png@
            float2 inputs:st.connect = </Materials/Material_131/Transform2d_diffuse.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

    }

}

