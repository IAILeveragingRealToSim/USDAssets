#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (5, 5, 5)
                double3 target = (-3.978038343177559e-8, 7.956076863990802e-8, -3.978038254359717e-8)
            }
            dictionary Right = {
                double3 position = (-5, 0, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 5, 0)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        string creator = "Three.js USDZExporter"
        dictionary omni_layer = {
            string authoring_layer = "./booknshelvetest.usda"
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            int "rtx:externalFrameCounter" = 10199
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "World" (
    prepend apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
)
{
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform", "xformOp:scale"]
    float3 xformOp:scale = (1,1,1)
    def Xform "Xform_184"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform", "xformOp:scale"]
	float3 xformOp:scale = (1,1,1)
        def Xform "Object_184" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_109>
            uniform token physics:approximation = "convexDecomposition"
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.411
            bool physics:rigidBodyEnabled = 1
            float physxRigidBody:maxLinearVelocity = 1000
            float physxRigidBody:sleepThreshold = 0.5
            float3 xformOp:scale = (1,1,1)
            matrix4d xformOp:transform = ( (3, 0, 0, 0), (0, 3, 0, 0), (0, 0, 3, 0), (0, -0.5800000000000001, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform", "xformOp:scale"]

            over "Geometry" (
                prepend references = @./booknshelve/geometries/Geometry_183.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "convexDecomposition"
                bool physics:collisionEnabled = 1
            }

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body1 = </World/Xform_184/Object_184>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (0, -0.58, 0)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }
    }

    def Xform "Xform_268"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform", "xformOp:scale"]
        float3 xformOp:scale = (1,1,1)

        def Xform "Object_268" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_188>
            uniform token physics:approximation = "convexDecomposition"
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.411
            bool physics:rigidBodyEnabled = 1
            float physxRigidBody:maxLinearVelocity = 1000
            float physxRigidBody:sleepThreshold = 0.5
            float3 xformOp:scale = (1,1,1)
            matrix4d xformOp:transform = ( (-0.04659532964075286, 0.02438217858502556, -0.9986162349086448, 0), (0.8157118113703725, 0.5779625087039086, -0.023949516144385452, 0), (0.5765788029805948, -0.8156989934406762, -0.04681918467180246, 0), (0.20789114209044574, 0.017860094527440917, 0.2369538404278383, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform", "xformOp:scale"]

            over "Geometry" (
                prepend references = @./booknshelve/geometries/Geometry_235.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "convexDecomposition"
                bool physics:collisionEnabled = 1
            }
        }
    }

    def Xform "Xform_272"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        float3 xformOp:scale = (1,1,1)
        uniform token[] xformOpOrder = ["xformOp:transform", "xformOp:scale"]

        def Xform "Object_272" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_193>
            uniform token physics:approximation = "convexDecomposition"
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.411
            bool physics:rigidBodyEnabled = 1
            float physxRigidBody:maxLinearVelocity = 1000
            float physxRigidBody:sleepThreshold = 0.5
            float3 xformOp:scale = (1,1,1)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.4590529772720394, -0.02888319609581902, 0.20050296095216974, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform", "xformOp:scale"]

            over "Geometry" (
                prepend references = @./booknshelve/geometries/Geometry_239.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "convexDecomposition"
                bool physics:collisionEnabled = 1
            }
        }
    }

    def Xform "Xform_277"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform", "xformOp:scale"]
        float3 xformOp:scale = (1,1,1)
        def Xform "Object_277" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_199>
            uniform token physics:approximation = "convexDecomposition"
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.411
            bool physics:rigidBodyEnabled = 1
            float physxRigidBody:maxLinearVelocity = 1000
            float physxRigidBody:sleepThreshold = 0.5
            float3 xformOp:scale = (1,1,1)
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.5071610705718341, -0.12337225930676077, -0.2673111189167574, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform", "xformOp:scale"]

            over "Geometry" (
                prepend references = @./booknshelve/geometries/Geometry_246.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "convexDecomposition"
                bool physics:collisionEnabled = 1
            }
        }
    }

    def Xform "SiteXform_279"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform", "xformOp:scale"]
	float3 xformOp:scale = (1,1,1)
        def Xform "Object_279" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysxJointAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_202>
            uniform token physics:approximation = "convexDecomposition"
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.001
            bool physics:rigidBodyEnabled = 1
            float physxRigidBody:maxLinearVelocity = 1000
            float physxRigidBody:sleepThreshold = 0.5
            float3 xformOp:scale = (1,1,1)
            matrix4d xformOp:transform = ( (0.1, 0, 0, 0), (0, 0.1, 0, 0), (0, 0, 0.1, 0), (0.3128295048003209, 0.055487141420634586, 0.13427866624824986, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform", "xformOp:scale"]

            over "Geometry" (
                prepend references = @./booknshelve/geometries/Geometry_248.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "convexDecomposition"
                bool physics:collisionEnabled = 0
            }

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/Xform_268/Object_268>
                rel physics:body1 = </World/SiteXform_279/Object_279>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (0.098560885, 0.1098055, 0.034620058)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (-0.60921013, -0.3249082, -0.64640874, 0.3247359)
            }
        }
    }

    def Xform "SiteXform_280"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform", "xformOp:scale"]
	float3 xformOp:scale = (1,1,1)
        def Xform "Object_280" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysxJointAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_203>
            uniform token physics:approximation = "convexDecomposition"
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.001
            bool physics:rigidBodyEnabled = 1
            float physxRigidBody:maxLinearVelocity = 1000
            float physxRigidBody:sleepThreshold = 0.5
            float3 xformOp:scale = (1,1,1)
            matrix4d xformOp:transform = ( (0.1, 0, 0, 0), (0, 0.1, 0, 0), (0, 0, 0.1, 0), (0.6008364234512017, 0.052933638461999166, -0.3428630441858732, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform", "xformOp:scale"]

            over "Geometry" (
                prepend references = @./booknshelve/geometries/Geometry_249.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "convexDecomposition"
                bool physics:collisionEnabled = 0
            }

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/Xform_277/Object_277>
                rel physics:body1 = </World/SiteXform_280/Object_280>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (0.09367535, 0.1763059, -0.07555193)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }
    }

    def "Materials"
    {
        def Material "Material_109" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_109/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 0.5
            float physics:restitution = 0
            float physics:staticFriction = 0.5

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0
                color3f inputs:diffuseColor.connect = </World/Materials/Material_109/Texture_15_diffuse.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 1
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_109.inputs:frame:stPrimvarName>
                float2 outputs:result
            }

            def Shader "Transform2d_diffuse" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_109/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_15_diffuse"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./booknshelve/textures/Texture_15_ffffff.png@
                float2 inputs:st.connect = </World/Materials/Material_109/Transform2d_diffuse.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }
        }

        def Material "Material_188" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_188/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 0.5
            float physics:restitution = 0
            float physics:staticFriction = 0.5

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </World/Materials/Material_188/Texture_21_diffuse.outputs:rgb>
                float inputs:metallic = 0
                normal3f inputs:normal.connect = </World/Materials/Material_188/Texture_20_normal.outputs:rgb>
                float inputs:occlusion.connect = </World/Materials/Material_188/Texture_19_occlusion.outputs:r>
                float inputs:opacity = 1
                float inputs:roughness = 0.9
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_188.inputs:frame:stPrimvarName>
                float2 outputs:result
            }

            def Shader "Transform2d_diffuse" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_188/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_21_diffuse"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./booknshelve/textures/Texture_21_ffffff.png@
                float2 inputs:st.connect = </World/Materials/Material_188/Transform2d_diffuse.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_normal" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_188/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_20_normal"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./booknshelve/textures/Texture_20.png@
                float2 inputs:st.connect = </World/Materials/Material_188/Transform2d_normal.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_occlusion" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_188/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_19_occlusion"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./booknshelve/textures/Texture_19.png@
                float2 inputs:st.connect = </World/Materials/Material_188/Transform2d_occlusion.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }
        }

        def Material "Material_193" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_193/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 0.5
            float physics:restitution = 0
            float physics:staticFriction = 0.5

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </World/Materials/Material_193/Texture_24_diffuse.outputs:rgb>
                float inputs:metallic = 0
                normal3f inputs:normal.connect = </World/Materials/Material_193/Texture_23_normal.outputs:rgb>
                float inputs:occlusion.connect = </World/Materials/Material_193/Texture_22_occlusion.outputs:r>
                float inputs:opacity = 1
                float inputs:roughness = 0.9
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_193.inputs:frame:stPrimvarName>
                float2 outputs:result
            }

            def Shader "Transform2d_diffuse" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_193/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_24_diffuse"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./booknshelve/textures/Texture_24_ffffff.png@
                float2 inputs:st.connect = </World/Materials/Material_193/Transform2d_diffuse.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_normal" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_193/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_23_normal"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./booknshelve/textures/Texture_23.png@
                float2 inputs:st.connect = </World/Materials/Material_193/Transform2d_normal.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_occlusion" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_193/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_22_occlusion"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./booknshelve/textures/Texture_22.png@
                float2 inputs:st.connect = </World/Materials/Material_193/Transform2d_occlusion.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }
        }

        def Material "Material_199" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_199/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 0.5
            float physics:restitution = 0
            float physics:staticFriction = 0.5

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </World/Materials/Material_199/Texture_27_diffuse.outputs:rgb>
                float inputs:metallic = 0
                normal3f inputs:normal.connect = </World/Materials/Material_199/Texture_26_normal.outputs:rgb>
                float inputs:occlusion.connect = </World/Materials/Material_199/Texture_25_occlusion.outputs:r>
                float inputs:opacity = 1
                float inputs:roughness = 0.9
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_199.inputs:frame:stPrimvarName>
                float2 outputs:result
            }

            def Shader "Transform2d_diffuse" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_199/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_27_diffuse"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./booknshelve/textures/Texture_27_ffffff.png@
                float2 inputs:st.connect = </World/Materials/Material_199/Transform2d_diffuse.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_normal" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_199/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_26_normal"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./booknshelve/textures/Texture_26.png@
                float2 inputs:st.connect = </World/Materials/Material_199/Transform2d_normal.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_occlusion" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_199/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_25_occlusion"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./booknshelve/textures/Texture_25.png@
                float2 inputs:st.connect = </World/Materials/Material_199/Transform2d_occlusion.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }
        }

        def Material "Material_202" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_202/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 0.5
            float physics:restitution = 0
            float physics:staticFriction = 0.5

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:metallic = 0
                float inputs:opacity = 0
                float inputs:roughness = 0.25
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_202.inputs:frame:stPrimvarName>
                float2 outputs:result
            }
        }

        def Material "Material_203" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_203/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 0.5
            float physics:restitution = 0
            float physics:staticFriction = 0.5

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:metallic = 0
                float inputs:opacity = 0
                float inputs:roughness = 0.25
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_203.inputs:frame:stPrimvarName>
                float2 outputs:result
            }
        }
    }
}

