#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (1.7582947348443227, 1.3480832747632907, 1.4897416559502463)
                double3 target = (0.2262548326724374, -0.18395659084151417, -0.042298246221639024)
            }
            dictionary Right = {
                double3 position = (-5, 0, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 5, 0)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        string creator = "Three.js USDZExporter"
        dictionary omni_layer = {
            string authoring_layer = "./model.usda"
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            int "rtx:externalFrameCounter" = 101497
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "World" (
    prepend apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
)
{
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Xform "Xform_263"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "Object_0" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI", "PhysxSDFMeshCollisionAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_180>
            uniform token physics:approximation = "sdf"
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.411
            bool physics:rigidBodyEnabled = 1
            float physxRigidBody:maxLinearVelocity = 1000
            float physxRigidBody:sleepThreshold = 0.5
            uniform int physxSDFMeshCollision:sdfResolution = 32
            matrix4d xformOp:transform = ( (0.06980350813521696, 0, -0.99756076018056, 0), (0, 1, 0, 0), (0.99756076018056, 0, 0.06980350813521696, 0), (0.3581776163440975, 0.5656080847517362, -0.9600910201068424, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "Geometry" (
                prepend references = @./geometries/Geometry_226.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "convexDecomposition"
                bool physics:collisionEnabled = 1
            }

            def PhysicsFixedJoint "FixedJoint" (
                prepend apiSchemas = ["PhysxLimitAPI:linear", "PhysxJointAPI"]
            )
            {
                rel physics:body1 = </World/Xform_263/Object_0>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (-0.9827512, -0.5689072, -0.2902862)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (0.7313698, 0, -0.68198115, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }
    }

    def Xform "Xform_266"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "Object_5" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI", "PhysxSDFMeshCollisionAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_183>
            uniform token physics:approximation = "sdf"
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.411
            bool physics:rigidBodyEnabled = 1
            float physxRigidBody:maxLinearVelocity = 1000
            float physxRigidBody:sleepThreshold = 0.5
            uniform int physxSDFMeshCollision:sdfResolution = 32
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 0.4229818014828528, 0, 0), (0, 0, 1, 0), (0.453983401651345, -0.0689115676934477, 0.13875475458425401, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "Geometry" (
                prepend references = @./geometries/Geometry_229.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "convexDecomposition"
                bool physics:collisionEnabled = 1
            }

            def PhysicsFixedJoint "FixedJoint" (
                prepend apiSchemas = ["PhysxLimitAPI:linear", "PhysxJointAPI"]
            )
            {
                rel physics:body1 = </World/Xform_266/Object_5>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (-0.4539834, 0.16291852, -0.13875476)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }
    }

    def Xform "Xform_269"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "Object_4" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI", "PhysxSDFMeshCollisionAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_186>
            uniform token physics:approximation = "sdf"
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.411
            bool physics:rigidBodyEnabled = 1
            float physxRigidBody:maxLinearVelocity = 1000
            float physxRigidBody:sleepThreshold = 0.5
            uniform int physxSDFMeshCollision:sdfResolution = 32
            matrix4d xformOp:transform = ( (0.20153395236479418, 0.014140558457021259, 0.2851787944619914, 0), (-0.021541749462148076, 0.3070171466815891, 0, 0), (-0.27507540495719573, -0.019300568456303013, 0.19535097089171916, 0), (0.4976948963329467, 0.09688691372300179, 0.13525581810079532, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "Geometry" (
                prepend references = @./geometries/Geometry_232.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "convexDecomposition"
                bool physics:collisionEnabled = 1
            }

            def PhysicsFixedJoint "FixedJoint" (
                prepend apiSchemas = ["PhysxLimitAPI:linear", "PhysxJointAPI"]
            )
            {
                rel physics:body0 = </World/Xform_266/Object_5>
                rel physics:body1 = </World/Xform_269/Object_4>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (-0.013123101, 0.50138265, -0.16007125)
                point3f physics:localPos1 = (-0.4539834, 0.16291852, -0.13875476)
                quatf physics:localRot0 = (0.88773173, 0.016083976, -0.4590274, 0.031105453)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }
    }

    def Xform "Xform_272"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "Object_1" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI", "PhysxSDFMeshCollisionAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_189>
            uniform token physics:approximation = "sdf"
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.411
            bool physics:rigidBodyEnabled = 1
            float physxRigidBody:maxLinearVelocity = 1000
            float physxRigidBody:sleepThreshold = 0.5
            uniform int physxSDFMeshCollision:sdfResolution = 32
            matrix4d xformOp:transform = ( (-0.009030763047853023, -0.5811633826237684, -0.001174843082081255, 0), (-0.7507838157823153, 0.011863961638126568, -0.09767205356142374, 0), (0.07873889900017163, 0, -0.6052487777854549, 0), (0.46660474097470767, 0.20233120595592952, 0.16274100045650755, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "Geometry" (
                prepend references = @./geometries/Geometry_235.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "convexDecomposition"
                bool physics:collisionEnabled = 1
            }
        }
    }

    def Xform "SiteXform_282"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "Object_3" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysxJointAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_199>
            uniform token physics:approximation = "convexDecomposition"
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.001
            bool physics:rigidBodyEnabled = 1
            float physxRigidBody:maxLinearVelocity = 1000
            float physxRigidBody:sleepThreshold = 0.5
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.5011950986548768, 0.21380165636101106, 0.09479774888199272, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "Geometry" (
                prepend references = @./geometries/Geometry_245.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "convexDecomposition"
                bool physics:collisionEnabled = 0
            }

            def PhysicsFixedJoint "FixedJoint" (
                prepend apiSchemas = ["PhysxLimitAPI:linear", "PhysxJointAPI"]
            )
            {
                rel physics:body0 = </World/Xform_272/Object_1>
                rel physics:body1 = </World/SiteXform_282/Object_3>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (-0.020420566, -0.033482842, 0.117699675)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, -2.247733e-9, -9.164986e-10, -2.0947311e-8)
                quatf physics:localRot1 = (0.04606289, -0.7000783, 0.7111345, -0.045346737)
            }
        }
    }

    def Xform "SiteXform_283"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "Object_2" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysxJointAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_200>
            uniform token physics:approximation = "convexDecomposition"
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.001
            bool physics:rigidBodyEnabled = 1
            float physxRigidBody:maxLinearVelocity = 1000
            float physxRigidBody:sleepThreshold = 0.5
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.2500539288951872, 0.36508240889154814, -0.373135047102536, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "Geometry" (
                prepend references = @./geometries/Geometry_246.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "convexDecomposition"
                bool physics:collisionEnabled = 0
            }

            def PhysicsFixedJoint "FixedJoint" (
                prepend apiSchemas = ["PhysxLimitAPI:linear", "PhysxJointAPI"]
            )
            {
                rel physics:body0 = </World/Xform_263/Object_0>
                rel physics:body1 = </World/SiteXform_283/Object_2>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (-0.59307164, -0.20052567, -0.06688835)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, -4.4115673e-8, 0)
                quatf physics:localRot1 = (0.7313698, 0, 0.68198115, 0)
            }
        }
    }

    def "Materials"
    {
        def Material "Material_180" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_180/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 0.5
            float physics:restitution = 0
            float physics:staticFriction = 0.5

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </World/Materials/Material_180/Texture_19_diffuse.outputs:rgb>
                float inputs:metallic = 0
                normal3f inputs:normal.connect = </World/Materials/Material_180/Texture_20_normal.outputs:rgb>
                float inputs:occlusion.connect = </World/Materials/Material_180/Texture_21_occlusion.outputs:r>
                float inputs:opacity = 1
                float inputs:roughness = 1
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_180.inputs:frame:stPrimvarName>
                float2 outputs:result
            }

            def Shader "Transform2d_diffuse" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_180/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_19_diffuse"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_19_ffffff.png@
                float2 inputs:st.connect = </World/Materials/Material_180/Transform2d_diffuse.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_normal" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_180/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_20_normal"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_20.png@
                float2 inputs:st.connect = </World/Materials/Material_180/Transform2d_normal.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_occlusion" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_180/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_21_occlusion"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_21.png@
                float2 inputs:st.connect = </World/Materials/Material_180/Transform2d_occlusion.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }
        }

        def Material "Material_183" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_183/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 0.5
            float physics:restitution = 0
            float physics:staticFriction = 0.5

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </World/Materials/Material_183/Texture_22_diffuse.outputs:rgb>
                float inputs:metallic = 0
                normal3f inputs:normal.connect = </World/Materials/Material_183/Texture_24_normal.outputs:rgb>
                float inputs:occlusion.connect = </World/Materials/Material_183/Texture_25_occlusion.outputs:r>
                float inputs:opacity = 1
                float inputs:roughness.connect = </World/Materials/Material_183/Texture_23_roughness.outputs:g>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_183.inputs:frame:stPrimvarName>
                float2 outputs:result
            }

            def Shader "Transform2d_diffuse" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_183/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_22_diffuse"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_22_ffffff.png@
                float2 inputs:st.connect = </World/Materials/Material_183/Transform2d_diffuse.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_normal" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_183/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_24_normal"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_24.png@
                float2 inputs:st.connect = </World/Materials/Material_183/Transform2d_normal.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_occlusion" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_183/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_25_occlusion"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_25.png@
                float2 inputs:st.connect = </World/Materials/Material_183/Transform2d_occlusion.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_roughness" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_183/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_23_roughness"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_23.png@
                float2 inputs:st.connect = </World/Materials/Material_183/Transform2d_roughness.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }
        }

        def Material "Material_186" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_186/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 0.5
            float physics:restitution = 0
            float physics:staticFriction = 0.5

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </World/Materials/Material_186/Texture_26_diffuse.outputs:rgb>
                float inputs:metallic = 0
                normal3f inputs:normal.connect = </World/Materials/Material_186/Texture_28_normal.outputs:rgb>
                float inputs:occlusion.connect = </World/Materials/Material_186/Texture_29_occlusion.outputs:r>
                float inputs:opacity = 1
                float inputs:roughness.connect = </World/Materials/Material_186/Texture_27_roughness.outputs:g>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_186.inputs:frame:stPrimvarName>
                float2 outputs:result
            }

            def Shader "Transform2d_diffuse" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_186/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_26_diffuse"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_26_ffffff.png@
                float2 inputs:st.connect = </World/Materials/Material_186/Transform2d_diffuse.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_normal" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_186/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_28_normal"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_28.png@
                float2 inputs:st.connect = </World/Materials/Material_186/Transform2d_normal.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_occlusion" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_186/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_29_occlusion"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_29.png@
                float2 inputs:st.connect = </World/Materials/Material_186/Transform2d_occlusion.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_roughness" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_186/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_27_roughness"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_27.png@
                float2 inputs:st.connect = </World/Materials/Material_186/Transform2d_roughness.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }
        }

        def Material "Material_189" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_189/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 0.5
            float physics:restitution = 0
            float physics:staticFriction = 0.5

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </World/Materials/Material_189/Texture_30_diffuse.outputs:rgb>
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 1
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_189.inputs:frame:stPrimvarName>
                float2 outputs:result
            }

            def Shader "Transform2d_diffuse" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_189/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_30_diffuse"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_30_ffffff.png@
                float2 inputs:st.connect = </World/Materials/Material_189/Transform2d_diffuse.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }
        }

        def Material "Material_199" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_199/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 0.5
            float physics:restitution = 0
            float physics:staticFriction = 0.5

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:metallic = 0
                float inputs:opacity = 0
                float inputs:roughness = 0.25
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_199.inputs:frame:stPrimvarName>
                float2 outputs:result
            }
        }

        def Material "Material_200" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_200/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 0.5
            float physics:restitution = 0
            float physics:staticFriction = 0.5

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:metallic = 0
                float inputs:opacity = 0
                float inputs:roughness = 0.25
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_200.inputs:frame:stPrimvarName>
                float2 outputs:result
            }
        }
    }
}

