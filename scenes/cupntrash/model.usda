#usda 1.0
(
    customLayerData = {
        string creator = "Three.js USDZExporter"
    }
    metersPerUnit = 1
    upAxis = "Y"
	defaultPrim = "World"
)

def Xform "World"(
			prepend apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"] 
		){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Xform_263"(){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Object_263" (
			prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
		)
{
    matrix4d xformOp:transform = ( (-0.03707532110930645, 2.4484516217014374e-16, -0.9993124739362768, 0), (4.5404173323872176e-18, 1, 2.4484516217014374e-16, 0), (0.9993124739362768, 4.5404173323872176e-18, -0.03707532110930645, 0), (-0.14810606493819567, 0.6789823192010809, -0.7775669795665788, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
	uniform token physics:approximation = "convexDecomposition"

    rel material:binding = </World/Materials/Material_180>

	bool physics:kinematicEnabled = 0
	
		bool physics:rigidBodyEnabled = 1
		float physics:mass = 0.411
		float physxRigidBody:maxLinearVelocity = 1000
		float physxRigidBody:sleepThreshold = 0.5
		
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_226.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexDecomposition"
		bool physics:collisionEnabled = 1
	}

	
}

}
def Xform "Xform_266"(){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Object_266" (
			prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
		)
{
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.46562669350189756, 0.04917800997768462, -0.31011466466110593, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
	uniform token physics:approximation = "convexDecomposition"

    rel material:binding = </World/Materials/Material_183>

	bool physics:kinematicEnabled = 0
	
		bool physics:rigidBodyEnabled = 1
		float physics:mass = 0.411
		float physxRigidBody:maxLinearVelocity = 1000
		float physxRigidBody:sleepThreshold = 0.5
		
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_229.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexDecomposition"
		bool physics:collisionEnabled = 1
	}

	
}

}
def Xform "SiteXform_267"(){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Object_267" (
			prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysxJointAPI"]
		)
{
    matrix4d xformOp:transform = ( (0.1, 0, 0, 0), (0, 0.1, 0, 0), (0, 0, 0.1, 0), (0.492051707659307, 0.05842462575583554, -0.2891365299540039, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
	uniform token physics:approximation = "convexDecomposition"

    rel material:binding = </World/Materials/Material_184>

	bool physics:kinematicEnabled = 0
	
		bool physics:rigidBodyEnabled = 1
		float physics:mass = 0.001
		float physxRigidBody:maxLinearVelocity = 1000
		float physxRigidBody:sleepThreshold = 0.5
		
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_230.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexDecomposition"
		bool physics:collisionEnabled = 0
	}

	
				def PhysicsFixedJoint "FixedJoint"
				{
					rel physics:body0 = </World/Xform_266/Object_266>
					rel physics:body1 = </World/SiteXform_267/Object_267>
					float physics:breakForce = inf
					float physics:breakTorque = inf
					point3f physics:localPos0 = (0.026425014157409443, 0.009246615778150918, 0.020978134707102025)
					point3f physics:localPos1 = (0, 0, 0)
					quatf physics:localRot0 = (1, 0, 0, 0)
					quatf physics:localRot1 = (1, 0, 0, 0)
				}
				
}

}
def Xform "SiteXform_268"(){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Object_268" (
			prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysxJointAPI"]
		)
{
    matrix4d xformOp:transform = ( (0.1, 0, 0, 0), (0, 0.1, 0, 0), (0, 0, 0.1, 0), (0.5515290956387238, -0.18781860242028744, 0.1372307099202285, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
	uniform token physics:approximation = "convexDecomposition"

    rel material:binding = </World/Materials/Material_185>

	bool physics:kinematicEnabled = 0
	
		bool physics:rigidBodyEnabled = 1
		float physics:mass = 0.001
		float physxRigidBody:maxLinearVelocity = 1000
		float physxRigidBody:sleepThreshold = 0.5
		
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_231.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexDecomposition"
		bool physics:collisionEnabled = 0
	}

	
				def PhysicsFixedJoint "FixedJoint"
				{
					rel physics:body0 = </World/Xform_263/Object_263>
					rel physics:body1 = </World/SiteXform_268/Object_268>
					float physics:breakForce = inf
					float physics:breakTorque = inf
					point3f physics:localPos0 = (-0.940107940470002, -0.8668009216213679, 0.6652377250811506)
					point3f physics:localPos1 = (0, 0, 0)
					quatf physics:localRot0 = (1, 0, 0, 0)
					quatf physics:localRot1 = (-0.6938748730465363, -8.658072016020384e-17, -0.7200955912617805, -8.658072016020384e-17)
				}
				
}

}
def "Materials"
{

    def Material "Material_180"(
		prepend apiSchemas = ["PhysicsMaterialAPI"]
	)
    {
		token outputs:surface.connect = </World/Materials/Material_180/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"
		float physics:dynamicFriction = 0.5
		float physics:restitution = 0
		float physics:staticFriction = 0.5

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor.connect = </World/Materials/Material_180/Texture_19_diffuse.outputs:rgb>
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:opacity = 1
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }



        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </World/Materials/Material_180.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }


        def Shader "Transform2d_diffuse" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_180/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_19_diffuse"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_19_ffffff.png@
            float2 inputs:st.connect = </World/Materials/Material_180/Transform2d_diffuse.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

    }

    def Material "Material_183"(
		prepend apiSchemas = ["PhysicsMaterialAPI"]
	)
    {
		token outputs:surface.connect = </World/Materials/Material_183/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"
		float physics:dynamicFriction = 0.5
		float physics:restitution = 0
		float physics:staticFriction = 0.5

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor.connect = </World/Materials/Material_183/Texture_22_diffuse.outputs:rgb>
            normal3f inputs:normal.connect = </World/Materials/Material_183/Texture_21_normal.outputs:rgb>
            float inputs:occlusion.connect = </World/Materials/Material_183/Texture_20_occlusion.outputs:r>
            float inputs:roughness = 0.8999999761581421
            float inputs:metallic = 0
            float inputs:opacity = 1
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }



        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </World/Materials/Material_183.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }


        def Shader "Transform2d_diffuse" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_183/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_22_diffuse"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_22_ffffff.png@
            float2 inputs:st.connect = </World/Materials/Material_183/Transform2d_diffuse.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_normal" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_183/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_21_normal"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_21.png@
            float2 inputs:st.connect = </World/Materials/Material_183/Transform2d_normal.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_occlusion" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_183/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_20_occlusion"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_20.png@
            float2 inputs:st.connect = </World/Materials/Material_183/Transform2d_occlusion.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

    }

    def Material "Material_184"(
		prepend apiSchemas = ["PhysicsMaterialAPI"]
	)
    {
		token outputs:surface.connect = </World/Materials/Material_184/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"
		float physics:dynamicFriction = 0.5
		float physics:restitution = 0
		float physics:staticFriction = 0.5

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1, 1, 1)
            float inputs:roughness = 0.25
            float inputs:metallic = 0
            float inputs:opacity = 0
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }



        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </World/Materials/Material_184.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }



    }

    def Material "Material_185"(
		prepend apiSchemas = ["PhysicsMaterialAPI"]
	)
    {
		token outputs:surface.connect = </World/Materials/Material_185/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"
		float physics:dynamicFriction = 0.5
		float physics:restitution = 0
		float physics:staticFriction = 0.5

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1, 1, 1)
            float inputs:roughness = 0.25
            float inputs:metallic = 0
            float inputs:opacity = 0
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }



        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </World/Materials/Material_185.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }



    }

}

}
