#usda 1.0
(
    customLayerData = {
        string creator = "Three.js USDZExporter"
    }
    metersPerUnit = 1
    upAxis = "X"
	defaultPrim = "World"
)

def Xform "World"(
			prepend apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"] 
		){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Xform_186"(){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Object_186" (
			prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI"]
		)
{
    matrix4d xformOp:transform = ( (3, 0, 0, 0), (0, 3, 0, 0), (0, 0, 3, 0), (0.00030791810871044767, -0.58, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
	uniform token physics:approximation = "convexDecomposition"

    rel material:binding = </World/Materials/Material_109>

	bool physics:kinematicEnabled = 0
	bool physics:rigidBodyEnabled = 1
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_183.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexDecomposition"
		bool physics:collisionEnabled = 1
	}

	
			def PhysicsFixedJoint "FixedJoint"
			{
				rel physics:body1 = </World/Xform_186/Object_186>
				float physics:breakForce = inf
				float physics:breakTorque = inf
				point3f physics:localPos0 = (0, -0.58, 0)
				point3f physics:localPos1 = (0,0,0)
				quatf physics:localRot0 = (1, 0, 0, 0)
				quatf physics:localRot1 = (1,0,0,0)
			}
			
}

}
def Xform "Xform_268"(){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Object_268" (
			prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI"]
		)
{
    matrix4d xformOp:transform = ( (1.21, 0, 0, 0), (0, 1.21, 0, 0), (0, 0, 1.21, 0), (-0.8638280992591938, -0.37612618987776847, 0.46206319805713736, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
	uniform token physics:approximation = "convexDecomposition"

    rel material:binding = </World/Materials/Material_185>

	bool physics:kinematicEnabled = 0
	bool physics:rigidBodyEnabled = 1
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_231.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexDecomposition"
		bool physics:collisionEnabled = 1
	}

	
}

}
def "Materials"
{

    def Material "Material_109"(
		prepend apiSchemas = ["PhysicsMaterialAPI"]
	)
    {
		token outputs:surface.connect = </World/Materials/Material_109/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"
		float physics:dynamicFriction = 10
		float physics:restitution = 0.7
		float physics:staticFriction = 10

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor.connect = </World/Materials/Material_109/Texture_15_diffuse.outputs:rgb>
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:opacity = 1
            float inputs:clearcoat = 0
            float inputs:clearcoatRoughness = 0
            float inputs:ior = 1.5
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }



        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </World/Materials/Material_109.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }


        def Shader "Transform2d_diffuse" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_109/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_15_diffuse"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_15_ffffff.png@
            float2 inputs:st.connect = </World/Materials/Material_109/Transform2d_diffuse.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

    }

    def Material "Material_185"(
		prepend apiSchemas = ["PhysicsMaterialAPI"]
	)
    {
		token outputs:surface.connect = </World/Materials/Material_185/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"
		float physics:dynamicFriction = 10
		float physics:restitution = 0.7
		float physics:staticFriction = 10

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor.connect = </World/Materials/Material_185/Texture_21_diffuse.outputs:rgb>
            normal3f inputs:normal.connect = </World/Materials/Material_185/Texture_19_normal.outputs:rgb>
            float inputs:occlusion.connect = </World/Materials/Material_185/Texture_20_occlusion.outputs:r>
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:opacity = 1
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }



        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </World/Materials/Material_185.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }


        def Shader "Transform2d_diffuse" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_185/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_21_diffuse"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_21_ffffff.png@
            float2 inputs:st.connect = </World/Materials/Material_185/Transform2d_diffuse.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_normal" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_185/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_19_normal"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_19.png@
            float2 inputs:st.connect = </World/Materials/Material_185/Transform2d_normal.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_occlusion" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_185/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_20_occlusion"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_20.png@
            float2 inputs:st.connect = </World/Materials/Material_185/Transform2d_occlusion.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

    }

}

}
