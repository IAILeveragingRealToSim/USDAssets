#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (1.7388019075850243, 0.5247342015610225, -0.20515938520255364)
                double3 target = (-8.056839174389987, -3.1265032292947876, -0.1746409764545741)
            }
            dictionary Right = {
                double3 position = (-5, 0, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 5, 0)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        string creator = "Three.js USDZExporter"
        dictionary omni_layer = {
            string authoring_layer = "./model.usda"
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "World" (
    prepend apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
)
{
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Xform "Xform_184"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "Object_184" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_109>
            uniform token physics:approximation = "convexDecomposition"
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.411
            bool physics:rigidBodyEnabled = 1
            float physxRigidBody:maxLinearVelocity = 1000
            float physxRigidBody:sleepThreshold = 0.5
            matrix4d xformOp:transform = ( (3, 0, 0, 0), (0, 3, 0, 0), (0, 0, 3, 0), (0, -0.58, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "Geometry" (
                prepend references = @./geometries/Geometry_183.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "convexDecomposition"
                bool physics:collisionEnabled = 1
            }

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body1 = </World/Xform_184/Object_184>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (0, 0, 0)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }
    }

    def Xform "Xform_270"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "Object_270" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_182>
            uniform token physics:approximation = "convexDecomposition"
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.411
            bool physics:rigidBodyEnabled = 1
            float physxRigidBody:maxLinearVelocity = 1000
            float physxRigidBody:sleepThreshold = 0.5
            matrix4d xformOp:transform = ( (0.0275, 0, 0, 0), (0, -0.0005449124990042066, -0.02749460074939131, 0), (0, 0.02749460074939131, -0.0005449124990042066, 0), (0.6207300916672192, 0.14167873870310627, 0.25235060590642283, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "Geometry" (
                prepend references = @./geometries/Geometry_229.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "convexDecomposition"
                bool physics:collisionEnabled = 1
            }
        }
    }

    def Xform "Xform_278"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "Object_278" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxSDFMeshCollisionAPI", "PhysxJointAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_195>
            uniform token physics:approximation = "sdf"
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.411
            bool physics:rigidBodyEnabled = 1
            float physxRigidBody:maxLinearVelocity = 1000
            float physxRigidBody:sleepThreshold = 0.5
            matrix4d xformOp:transform = ( (0.5052713065108951, -0.01053102711098047, -0.8628962882552922, 0), (-0.8629605476594937, -0.0061660128515712564, -0.5052336820410351, 0), (-3.3306690738754706e-16, 0.9999255361043157, -0.012203370292585006, 0), (0.6206038678043143, 0.3033742711176461, -0.2150025430532756, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "Geometry" (
                prepend references = @./geometries/Geometry_243.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "sdf"
                bool physics:collisionEnabled = 1
            }

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body1 = </World/Xform_278/Object_278>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (0.30520853, 0.1787024, -0.2990805)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (0.60969293, 0.6171792, -0.35382414, -0.3495323)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }
    }

    def Xform "SiteXform_280"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "Object_280" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysxJointAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_198>
            uniform token physics:approximation = "convexDecomposition"
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.001
            bool physics:rigidBodyEnabled = 1
            float physxRigidBody:maxLinearVelocity = 1000
            float physxRigidBody:sleepThreshold = 0.5
            matrix4d xformOp:transform = ( (0.1, 0, 0, 0), (0, 0.1, 0, 0), (0, 0, 0.1, 0), (0.6067923173460859, 0, -0.2174341458212342, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "Geometry" (
                prepend references = @./geometries/Geometry_245.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "convexDecomposition"
                bool physics:collisionEnabled = 0
            }

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/Xform_278/Object_278>
                rel physics:body1 = </World/SiteXform_280/Object_280>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (0.022590593, 0.013226999, -0.30307737)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (0.60969293, -0.6171792, 0.35382414, 0.3495323)
            }
        }
    }

    def Xform "SiteXform_281"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "Object_281" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysxJointAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_199>
            uniform token physics:approximation = "convexDecomposition"
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.001
            bool physics:rigidBodyEnabled = 1
            float physxRigidBody:maxLinearVelocity = 1000
            float physxRigidBody:sleepThreshold = 0.5
            matrix4d xformOp:transform = ( (0.1, 0, 0, 0), (0, 0.1, 0, 0), (0, 0, 0.1, 0), (0.6057268556002781, 0.14788911305135607, 0.1768705386144625, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "Geometry" (
                prepend references = @./geometries/Geometry_246.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "convexDecomposition"
                bool physics:collisionEnabled = 0
            }

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/Xform_270/Object_270>
                rel physics:body1 = </World/SiteXform_281/Object_281>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (-0.064698316, -2.3490908, 0.25594693)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }
    }

    def Xform "Xform_287"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "Object_287" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_205>
            uniform token physics:approximation = "convexDecomposition"
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.411
            bool physics:rigidBodyEnabled = 1
            float physxRigidBody:maxLinearVelocity = 1000
            float physxRigidBody:sleepThreshold = 0.5
            matrix4d xformOp:transform = ( (0.9989225992795889, -0.00006204928174753307, 0.04640729251310095, 0), (0.046398603343920056, -0.018061170518982365, -0.9987597127073243, 0), (0.0009001423462152748, 0.9998368818309169, -0.018038832400842253, 0), (0.6012482653155197, 0.06240311416686913, 0.2890546862441458, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "Geometry" (
                prepend references = @./geometries/Geometry_252.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "convexDecomposition"
                bool physics:collisionEnabled = 1
            }
        }
    }

    def "Materials"
    {
        def Material "Material_109" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_109/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 0.5
            float physics:restitution = 0
            float physics:staticFriction = 0.5

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0
                color3f inputs:diffuseColor.connect = </World/Materials/Material_109/Texture_15_diffuse.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 1
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_109.inputs:frame:stPrimvarName>
                float2 outputs:result
            }

            def Shader "Transform2d_diffuse" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_109/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_15_diffuse"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_15_ffffff.png@
                float2 inputs:st.connect = </World/Materials/Material_109/Transform2d_diffuse.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }
        }

        def Material "Material_182" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_182/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 0.5
            float physics:restitution = 0
            float physics:staticFriction = 0.5

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </World/Materials/Material_182/Texture_20_diffuse.outputs:rgb>
                float inputs:metallic = 0
                normal3f inputs:normal.connect = </World/Materials/Material_182/Texture_22_normal.outputs:rgb>
                float inputs:occlusion.connect = </World/Materials/Material_182/Texture_21_occlusion.outputs:r>
                float inputs:opacity = 1
                float inputs:roughness.connect = </World/Materials/Material_182/Texture_21_roughness.outputs:g>
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_182.inputs:frame:stPrimvarName>
                float2 outputs:result
            }

            def Shader "Transform2d_diffuse" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_182/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_20_diffuse"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_20_ffffff.png@
                float2 inputs:st.connect = </World/Materials/Material_182/Transform2d_diffuse.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_normal" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_182/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_22_normal"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_22.png@
                float2 inputs:st.connect = </World/Materials/Material_182/Transform2d_normal.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_occlusion" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_182/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_21_occlusion"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_21.png@
                float2 inputs:st.connect = </World/Materials/Material_182/Transform2d_occlusion.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_roughness" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_182/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_21_roughness"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_21.png@
                float2 inputs:st.connect = </World/Materials/Material_182/Transform2d_roughness.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }
        }

        def Material "Material_187" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_187/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 0.5
            float physics:restitution = 0
            float physics:staticFriction = 0.5

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </World/Materials/Material_187/Texture_16_diffuse.outputs:rgb>
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.999
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_187.inputs:frame:stPrimvarName>
                float2 outputs:result
            }

            def Shader "Transform2d_diffuse" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_187/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_16_diffuse"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_16_ffffff.png@
                float2 inputs:st.connect = </World/Materials/Material_187/Transform2d_diffuse.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }
        }

        def Material "Material_195" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_195/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 0.5
            float physics:restitution = 0
            float physics:staticFriction = 0.5

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </World/Materials/Material_195/Texture_16_diffuse.outputs:rgb>
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.999
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_195.inputs:frame:stPrimvarName>
                float2 outputs:result
            }

            def Shader "Transform2d_diffuse" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_195/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_16_diffuse"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_16_ffffff.png@
                float2 inputs:st.connect = </World/Materials/Material_195/Transform2d_diffuse.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }
        }

        def Material "Material_198" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_198/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 0.5
            float physics:restitution = 0
            float physics:staticFriction = 0.5

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:metallic = 0
                float inputs:opacity = 0
                float inputs:roughness = 0.25
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_198.inputs:frame:stPrimvarName>
                float2 outputs:result
            }
        }

        def Material "Material_199" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_199/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 0.5
            float physics:restitution = 0
            float physics:staticFriction = 0.5

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:metallic = 0
                float inputs:opacity = 0
                float inputs:roughness = 0.25
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_199.inputs:frame:stPrimvarName>
                float2 outputs:result
            }
        }

        def Material "Material_205" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_205/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 0.5
            float physics:restitution = 0
            float physics:staticFriction = 0.5

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </World/Materials/Material_205/Texture_25_diffuse.outputs:rgb>
                float inputs:metallic = 0
                normal3f inputs:normal.connect = </World/Materials/Material_205/Texture_24_normal.outputs:rgb>
                float inputs:occlusion.connect = </World/Materials/Material_205/Texture_23_occlusion.outputs:r>
                float inputs:opacity = 1
                float inputs:roughness = 0.9
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_205.inputs:frame:stPrimvarName>
                float2 outputs:result
            }

            def Shader "Transform2d_diffuse" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_205/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_25_diffuse"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_25_ffffff.png@
                float2 inputs:st.connect = </World/Materials/Material_205/Transform2d_diffuse.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_normal" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_205/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_24_normal"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_24.png@
                float2 inputs:st.connect = </World/Materials/Material_205/Transform2d_normal.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_occlusion" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_205/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_23_occlusion"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_23.png@
                float2 inputs:st.connect = </World/Materials/Material_205/Transform2d_occlusion.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }
        }
    }
}

