#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (5, 5, 5)
                double3 target = (-3.978038343177559e-8, 7.956076863990802e-8, -3.978038254359717e-8)
            }
            dictionary Right = {
                double3 position = (-5, 0, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 5, 0)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        string creator = "Three.js USDZExporter"
        dictionary omni_layer = {
            string authoring_layer = "./obj2cabinet_13.usdz"
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "World" (
    prepend apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
)
{
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Xform "Xform_262"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "Background" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI", "PhysxSDFMeshCollisionAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_180>
            uniform token physics:approximation = "sdf"
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.411
            bool physics:rigidBodyEnabled = 1
            float physxRigidBody:maxLinearVelocity = 1000
            float physxRigidBody:sleepThreshold = 0.5
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.1, 0.7, 0.4, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "Geometry" (
                prepend references = @./geometries/Geometry_226.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "convexDecomposition"
                bool physics:collisionEnabled = 1
            }

            def PhysicsFixedJoint "FixedJoint" (
                prepend apiSchemas = ["PhysxLimitAPI:linear", "PhysxJointAPI"]
            )
            {
                rel physics:body1 = </World/Xform_262/Background>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (-0.1, -0.7, -0.4)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }
    }

    def Xform "Xform_263"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "Object_263" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_181>
            uniform token physics:approximation = "convexDecomposition"
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.411
            bool physics:rigidBodyEnabled = 1
            float physxRigidBody:maxLinearVelocity = 1000
            float physxRigidBody:sleepThreshold = 0.5
            matrix4d xformOp:transform = ( (0.4, 0, 0, 0), (0, 0.001, 0, 0), (0, 0, 1, 0), (0.7168719658689053, 0.5923722834614643, 0.055385240155960566, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "Geometry" (
                prepend references = @./geometries/Geometry_227.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "convexDecomposition"
                bool physics:collisionEnabled = 1
            }

            def PhysicsFixedJoint "FixedJoint" (
                prepend apiSchemas = ["PhysxLimitAPI:linear", "PhysxJointAPI"]
            )
            {
                rel physics:body0 = </World/Xform_262/Background>
                rel physics:body1 = </World/Xform_263/Object_263>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (0.57687193, -0.1083277, -0.7446148)
                point3f physics:localPos1 = (-0.1, -0.7, -0.4)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }
    }

    def Xform "SiteXform_267"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "Cabinet" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysxJointAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_185>
            uniform token physics:approximation = "convexDecomposition"
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.001
            bool physics:rigidBodyEnabled = 1
            float physxRigidBody:maxLinearVelocity = 1000
            float physxRigidBody:sleepThreshold = 0.5
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0.7967918130095959, 0.5779859267597237, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "Geometry" (
                prepend references = @./geometries/Geometry_231.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "convexDecomposition"
                bool physics:collisionEnabled = 0
            }

            def PhysicsFixedJoint "FixedJoint" (
                prepend apiSchemas = ["PhysxLimitAPI:linear", "PhysxJointAPI"]
            )
            {
                rel physics:body0 = </World/Xform_262/Background>
                rel physics:body1 = </World/SiteXform_267/Cabinet>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (0.69679177, -0.12201406, -0.4)
                point3f physics:localPos1 = (0, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }
    }

    def Xform "Xform_279"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Xform "Object" (
            prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
        )
        {
            rel material:binding = </World/Materials/Material_199>
            uniform token physics:approximation = "convexDecomposition"
            bool physics:kinematicEnabled = 0
            float physics:mass = 0.411
            bool physics:rigidBodyEnabled = 1
            float physxRigidBody:maxLinearVelocity = 1000
            float physxRigidBody:sleepThreshold = 0.5
            matrix4d xformOp:transform = ( (-0.06334494196685636, -2.459467334275726e-19, 0.9979916925141288, 0), (-7.757518042188563e-18, 1, -2.459467334275726e-19, 0), (-0.9979916925141288, -7.757518042188563e-18, -0.06334494196685636, 0), (0.4, 0.04, 0.1, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]

            over "Geometry" (
                prepend references = @./geometries/Geometry_245.usd@</Geometry>
            )
            {
                uniform token physics:approximation = "convexDecomposition"
                bool physics:collisionEnabled = 1
            }
        }
    }

    def "Materials"
    {
        def Material "Material_180" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_180/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 0.5
            float physics:restitution = 0
            float physics:staticFriction = 0.5

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </World/Materials/Material_180/Texture_19_diffuse.outputs:rgb>
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 1
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_180.inputs:frame:stPrimvarName>
                float2 outputs:result
            }

            def Shader "Transform2d_diffuse" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_180/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_19_diffuse"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_19_ffffff.png@
                float2 inputs:st.connect = </World/Materials/Material_180/Transform2d_diffuse.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }
        }

        def Material "Material_181" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_181/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 0.5
            float physics:restitution = 0
            float physics:staticFriction = 0.5

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.25
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_181.inputs:frame:stPrimvarName>
                float2 outputs:result
            }
        }

        def Material "Material_185" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_185/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 0.5
            float physics:restitution = 0
            float physics:staticFriction = 0.5

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:metallic = 0
                float inputs:opacity = 0
                float inputs:roughness = 0.25
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_185.inputs:frame:stPrimvarName>
                float2 outputs:result
            }
        }

        def Material "Material_199" (
            prepend apiSchemas = ["PhysicsMaterialAPI"]
        )
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_199/PreviewSurface.outputs:surface>
            float physics:dynamicFriction = 0.5
            float physics:restitution = 0
            float physics:staticFriction = 0.5

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </World/Materials/Material_199/Texture_28_diffuse.outputs:rgb>
                float inputs:metallic = 0
                normal3f inputs:normal.connect = </World/Materials/Material_199/Texture_27_normal.outputs:rgb>
                float inputs:occlusion.connect = </World/Materials/Material_199/Texture_26_occlusion.outputs:r>
                float inputs:opacity = 1
                float inputs:roughness = 0.9
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_199.inputs:frame:stPrimvarName>
                float2 outputs:result
            }

            def Shader "Transform2d_diffuse" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_199/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_28_diffuse"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_28_ffffff.png@
                float2 inputs:st.connect = </World/Materials/Material_199/Transform2d_diffuse.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_normal" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_199/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_27_normal"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_27.png@
                float2 inputs:st.connect = </World/Materials/Material_199/Transform2d_normal.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }

            def Shader "Transform2d_occlusion" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_199/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_26_occlusion"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @textures/Texture_26.png@
                float2 inputs:st.connect = </World/Materials/Material_199/Transform2d_occlusion.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }
        }
    }
}

