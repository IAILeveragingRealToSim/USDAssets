#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (1.4594022335200747, 1.808404688640305, 1.5408020695974864)
                double3 target = (-0.1434674415165147, 0.20553505186137722, -0.062067605439102946)
            }
            dictionary Right = {
                double3 position = (-5, 0, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 5, 0)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        string creator = "Three.js USDZExporter"
        dictionary omni_layer = {
            string authoring_layer = "./modelartrig.usd"
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "World" (
    prepend apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
)
{
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Xform "Object_163" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI"]
    )
    {
        rel material:binding = </World/Materials/Material_107>
        bool physics:kinematicEnabled = 0
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (0.6888337568985701, -0.0000356371536727418, 0.001993825194242817, 0), (0.0000015425738630230908, 0.018034623423721023, -0.0002105873193853457, 0), (-0.0013648130474905075, 0.005507132235646511, 0.47161885615652105, 0), (0, 0.03572548648570317, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        over "Geometry" (
            prepend references = @../../../afs/csail.mit.edu/u/m/marcel/Desktop/drawer_bottom_large/geometries/Geometry_182.usd@</Geometry>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
        }

        def PhysicsFixedJoint "FixedJoint"
        {
            rel physics:body0 = </World/Object_163>
            rel physics:body1 = </World/Object_178>
            float physics:breakForce = inf
            float physics:breakTorque = inf
            point3f physics:localPos0 = (-0.16423659, 8.276418, 0.064100936)
            point3f physics:localPos1 = (-0.16423659, 8.276418, 0.064100936)
            quatf physics:localRot0 = (0.99998194, -0.005838175, -0.0014470668, -0.000034316487)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "Object_173" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI"]
    )
    {
        rel material:binding = </World/Materials/Material_121>
        bool physics:kinematicEnabled = 0
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.1259900237903943, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        over "Geometry" (
            prepend references = @../../../afs/csail.mit.edu/u/m/marcel/Desktop/drawer_bottom_large/geometries/Geometry_196.usd@</Geometry>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
        }
    }

    def Xform "Object_178" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI"]
    )
    {
        rel material:binding = </World/Materials/Material_129>
        bool physics:kinematicEnabled = 0
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        over "Geometry" (
            prepend references = @../../../afs/csail.mit.edu/u/m/marcel/Desktop/drawer_bottom_large/geometries/Geometry_205.usd@</Geometry>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
        }

        def PhysicsPrismaticJoint "PrismaticJoint"
        {
            uniform token physics:axis = "Y"
            rel physics:body0 = </World/Object_178>
            rel physics:body1 = </World/Object_173>
            float physics:breakForce = inf
            float physics:breakTorque = inf
            point3f physics:localPos0 = (0.057463687, 0.67854756, 0.006441988)
            point3f physics:localPos1 = (0.057463687, 0.67854756, 0.006441988)
            quatf physics:localRot0 = (0.71059215, 0, 0, -0.70360416)
            quatf physics:localRot1 = (0.71059215, 0, 0, -0.70360416)
            float physics:lowerLimit = -0.18519527
            float physics:upperLimit = 0.18519527
        }
    }

    def Xform "Object_179" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI"]
    )
    {
        rel material:binding = </World/Materials/Material_131>
        bool physics:kinematicEnabled = 0
        bool physics:rigidBodyEnabled = 1
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (-0.13837790153513974, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        over "Geometry" (
            prepend references = @../../../afs/csail.mit.edu/u/m/marcel/Desktop/drawer_bottom_large/geometries/Geometry_206.usd@</Geometry>
        )
        {
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 1
        }
    }

    def "Materials"
    {
        def Material "Material_107"
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_107/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.25
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_107.inputs:frame:stPrimvarName>
                float2 outputs:result
            }
        }

        def Material "Material_121"
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_121/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0
                color3f inputs:diffuseColor.connect = </World/Materials/Material_121/Texture_15_diffuse.outputs:rgb>
                float inputs:ior = 1.45
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 1
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_121.inputs:frame:stPrimvarName>
                float2 outputs:result
            }

            def Shader "Transform2d_diffuse" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_121/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_15_diffuse"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @../../../afs/csail.mit.edu/u/m/marcel/Desktop/drawer_bottom_large/textures/Texture_15_ffffff.png@
                float2 inputs:st.connect = </World/Materials/Material_121/Transform2d_diffuse.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }
        }

        def Material "Material_129"
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_129/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0
                color3f inputs:diffuseColor.connect = </World/Materials/Material_129/Texture_15_diffuse.outputs:rgb>
                float inputs:ior = 1.45
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 1
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_129.inputs:frame:stPrimvarName>
                float2 outputs:result
            }

            def Shader "Transform2d_diffuse" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_129/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_15_diffuse"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @../../../afs/csail.mit.edu/u/m/marcel/Desktop/drawer_bottom_large/textures/Texture_15_ffffff.png@
                float2 inputs:st.connect = </World/Materials/Material_129/Transform2d_diffuse.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }
        }

        def Material "Material_131"
        {
            token inputs:frame:stPrimvarName = "st"
            token outputs:surface.connect = </World/Materials/Material_131/PreviewSurface.outputs:surface>

            def Shader "PreviewSurface"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0
                color3f inputs:diffuseColor.connect = </World/Materials/Material_131/Texture_15_diffuse.outputs:rgb>
                float inputs:ior = 1.45
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 1
                int inputs:useSpecularWorkflow = 0
                token outputs:surface
            }

            def Shader "uvReader_st"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                float2 inputs:fallback = (0, 0)
                token inputs:varname.connect = </World/Materials/Material_131.inputs:frame:stPrimvarName>
                float2 outputs:result
            }

            def Shader "Transform2d_diffuse" (
                sdrMetadata = {
                    string role = "math"
                }
            )
            {
                uniform token info:id = "UsdTransform2d"
                float2 inputs:in.connect = </World/Materials/Material_131/uvReader_st.outputs:result>
                float2 inputs:scale = (1, 1)
                float2 inputs:translation = (0, 0)
                float2 outputs:result
            }

            def Shader "Texture_15_diffuse"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @../../../afs/csail.mit.edu/u/m/marcel/Desktop/drawer_bottom_large/textures/Texture_15_ffffff.png@
                float2 inputs:st.connect = </World/Materials/Material_131/Transform2d_diffuse.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float outputs:b
                float outputs:g
                float outputs:r
                float3 outputs:rgb
            }
        }
    }
}

def "Franka" (
    instanceable = false
    prepend references = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/2022.2.1/Isaac/Robots/Franka/franka_alt_fingers.usd@
)
{
    double3 xformOp:rotateXYZ = (0, -90, -90)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0.44955455133194816)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
}

