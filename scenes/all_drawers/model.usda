#usda 1.0
(
    customLayerData = {
        string creator = "Three.js USDZExporter"
    }
    metersPerUnit = 1
    upAxis = "Y"
	defaultPrim = "World"
)

def Xform "World"(
			prepend apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"] 
		){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Xform_183"(){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Object_183" (
			prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
		)
{
    matrix4d xformOp:transform = ( (3, 0, 0, 0), (0, 3, 0, 0), (0, 0, 3, 0), (0, -0.58, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
	uniform token physics:approximation = "convexDecomposition"

    rel material:binding = </World/Materials/Material_109>

	bool physics:kinematicEnabled = 0
	
		bool physics:rigidBodyEnabled = 1
		float physics:mass = 0.411
		float physxRigidBody:maxLinearVelocity = 1000
		float physxRigidBody:sleepThreshold = 0.5
		
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_183.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexDecomposition"
		bool physics:collisionEnabled = 1
	}

	
			def PhysicsFixedJoint "FixedJoint"
			{
				rel physics:body1 = </World/Xform_183/Object_183>
				float physics:breakForce = inf
				float physics:breakTorque = inf
				point3f physics:localPos0 = (0, 0, 0)
				point3f physics:localPos1 = (0,0,0)
				quatf physics:localRot0 = (1, 0, 0, 0)
				quatf physics:localRot1 = (1,0,0,0)
			}
			
}

}
def Xform "Xform_287"(){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Object_287" (
			prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
		)
{
    matrix4d xformOp:transform = ( (-0.19997554401148193, 2.4109917103380524e-17, -0.003127586499496921, 0), (2.4489940988141203e-17, 0.2, -2.4109917103380524e-17, 0), (0.003127586499496921, -2.4489940988141203e-17, -0.19997554401148193, 0), (1.2869465239278854, -0.2309560187171127, 0.8924768337782725, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
	uniform token physics:approximation = "convexDecomposition"

    rel material:binding = </World/Materials/Material_184>

	bool physics:kinematicEnabled = 0
	
		bool physics:rigidBodyEnabled = 1
		float physics:mass = 0.411
		float physxRigidBody:maxLinearVelocity = 1000
		float physxRigidBody:sleepThreshold = 0.5
		
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_235.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexDecomposition"
		bool physics:collisionEnabled = 1
	}

	
}

}
def Xform "Xform_288"(){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Object_288" (
			prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
		)
{
    matrix4d xformOp:transform = ( (-0.19983168333101475, 2.348829007810202e-17, -0.008203556368616036, 0), (2.4472323135955473e-17, 0.2, -2.348829007810202e-17, 0), (0.008203556368616036, -2.4472323135955473e-17, -0.19983168333101475, 0), (0.5095563364614617, 0.24949055071049908, -0.21675757560346554, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
	uniform token physics:approximation = "convexDecomposition"

    rel material:binding = </World/Materials/Material_185>

	bool physics:kinematicEnabled = 0
	
		bool physics:rigidBodyEnabled = 1
		float physics:mass = 0.411
		float physxRigidBody:maxLinearVelocity = 1000
		float physxRigidBody:sleepThreshold = 0.5
		
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_237.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexDecomposition"
		bool physics:collisionEnabled = 1
	}

	
}

}
def Xform "Xform_291"(){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Object_291" (
			prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
		)
{
    matrix4d xformOp:transform = ( (-0.19998895352473112, 2.4235513359003232e-17, -0.0021020152432772083, 0), (2.4491583179889068e-17, 0.2, -2.4235513359003232e-17, 0), (0.0021020152432772083, -2.4491583179889068e-17, -0.19998895352473112, 0), (0.5132101813794989, 0.41089446716967215, -0.21352180853227815, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
	uniform token physics:approximation = "convexDecomposition"

    rel material:binding = </World/Materials/Material_188>

	bool physics:kinematicEnabled = 0
	
		bool physics:rigidBodyEnabled = 1
		float physics:mass = 0.411
		float physxRigidBody:maxLinearVelocity = 1000
		float physxRigidBody:sleepThreshold = 0.5
		
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_243.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexDecomposition"
		bool physics:collisionEnabled = 1
	}

	
}

}
def Xform "Xform_293"(){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Object_293" (
			prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
		)
{
    matrix4d xformOp:transform = ( (-0.26158651362267366, -3.125752167009761e-17, 0.006428456986464686, 0), (-3.2035108660812284e-17, 0.26166549097749225, -3.125752167009761e-17, 0), (-0.006428456986464686, -3.2035108660812284e-17, -0.26158651362267366, 0), (0.5125238893101264, 0.2454595384202527, 0.0668264598154859, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
	uniform token physics:approximation = "convexDecomposition"

    rel material:binding = </World/Materials/Material_190>

	bool physics:kinematicEnabled = 0
	
		bool physics:rigidBodyEnabled = 1
		float physics:mass = 0.411
		float physxRigidBody:maxLinearVelocity = 1000
		float physxRigidBody:sleepThreshold = 0.5
		
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_247.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexDecomposition"
		bool physics:collisionEnabled = 1
	}

	
}

}
def Xform "Xform_294"(){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Object_294" (
			prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
		)
{
    matrix4d xformOp:transform = ( (-0.19997817703161688, 2.4131121529404988e-17, -0.0029544392211205872, 0), (2.4490263440109235e-17, 0.2, -2.4131121529404988e-17, 0), (0.0029544392211205872, -2.4490263440109235e-17, -0.19997817703161688, 0), (0.5329225208831134, 0.10973677677064608, -0.19163478380850574, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
	uniform token physics:approximation = "convexDecomposition"

    rel material:binding = </World/Materials/Material_191>

	bool physics:kinematicEnabled = 0
	
		bool physics:rigidBodyEnabled = 1
		float physics:mass = 0.411
		float physxRigidBody:maxLinearVelocity = 1000
		float physxRigidBody:sleepThreshold = 0.5
		
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_249.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexDecomposition"
		bool physics:collisionEnabled = 1
	}

	
}

}
def Xform "Xform_310"(){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Object_310" (
			prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
		)
{
    matrix4d xformOp:transform = ( (0.15, 0, 0, 0), (0, -2.5288109539722826e-8, -0.14999999999999786, 0), (0, 0.14999999999999786, -2.5288109539722826e-8, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
	uniform token physics:approximation = "convexDecomposition"

    rel material:binding = </World/Materials/Material_196>

	bool physics:kinematicEnabled = 0
	
		bool physics:rigidBodyEnabled = 1
		float physics:mass = 0.411
		float physxRigidBody:maxLinearVelocity = 1000
		float physxRigidBody:sleepThreshold = 0.5
		
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_259.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexDecomposition"
		bool physics:collisionEnabled = 1
	}

	
}

}
def Xform "Xform_311"(){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Object_311" (
			prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
		)
{
    matrix4d xformOp:transform = ( (0.15, 0, 0, 0), (0, -2.015382913889141e-8, -0.14999999999999863, 0), (0, 0.14999999999999863, -2.015382913889141e-8, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
	uniform token physics:approximation = "convexDecomposition"

    rel material:binding = </World/Materials/Material_197>

	bool physics:kinematicEnabled = 0
	
		bool physics:rigidBodyEnabled = 1
		float physics:mass = 0.411
		float physxRigidBody:maxLinearVelocity = 1000
		float physxRigidBody:sleepThreshold = 0.5
		
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_261.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexDecomposition"
		bool physics:collisionEnabled = 1
	}

	
}

}
def Xform "Xform_312"(){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Object_312" (
			prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
		)
{
    matrix4d xformOp:transform = ( (0.15, 0, 0, 0), (0, -2.015382913889141e-8, -0.14999999999999863, 0), (0, 0.14999999999999863, -2.015382913889141e-8, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
	uniform token physics:approximation = "convexDecomposition"

    rel material:binding = </World/Materials/Material_198>

	bool physics:kinematicEnabled = 0
	
		bool physics:rigidBodyEnabled = 1
		float physics:mass = 0.411
		float physxRigidBody:maxLinearVelocity = 1000
		float physxRigidBody:sleepThreshold = 0.5
		
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_263.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexDecomposition"
		bool physics:collisionEnabled = 1
	}

	
}

}
def Xform "Xform_313"(){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Object_313" (
			prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
		)
{
    matrix4d xformOp:transform = ( (0.15, 0, 0, 0), (0, -2.015382913889141e-8, -0.14999999999999863, 0), (0, 0.14999999999999863, -2.015382913889141e-8, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
	uniform token physics:approximation = "convexDecomposition"

    rel material:binding = </World/Materials/Material_199>

	bool physics:kinematicEnabled = 0
	
		bool physics:rigidBodyEnabled = 1
		float physics:mass = 0.411
		float physxRigidBody:maxLinearVelocity = 1000
		float physxRigidBody:sleepThreshold = 0.5
		
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_265.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexDecomposition"
		bool physics:collisionEnabled = 1
	}

	
}

}
def Xform "Xform_329"(){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Object_329" (
			prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
		)
{
    matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 2.220446049250313e-18, -0.010000000000000002, 0), (0, 0.010000000000000002, 2.220446049250313e-18, 0), (1.0927300714286599, 0.0042435590020493685, -0.4032293730729677, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
	uniform token physics:approximation = "convexDecomposition"

    rel material:binding = </World/Materials/Material_206>

	bool physics:kinematicEnabled = 0
	
		bool physics:rigidBodyEnabled = 1
		float physics:mass = 0.411
		float physxRigidBody:maxLinearVelocity = 1000
		float physxRigidBody:sleepThreshold = 0.5
		
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_272.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexDecomposition"
		bool physics:collisionEnabled = 1
	}

	
}

}
def Xform "Xform_330"(){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Object_330" (
			prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
		)
{
    matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 2.220446049250313e-18, -0.010000000000000002, 0), (0, 0.010000000000000002, 2.220446049250313e-18, 0), (1.0945676722279314, 0.007397753342263974, -0.13086583964609488, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
	uniform token physics:approximation = "convexDecomposition"

    rel material:binding = </World/Materials/Material_207>

	bool physics:kinematicEnabled = 0
	
		bool physics:rigidBodyEnabled = 1
		float physics:mass = 0.411
		float physxRigidBody:maxLinearVelocity = 1000
		float physxRigidBody:sleepThreshold = 0.5
		
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_274.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexDecomposition"
		bool physics:collisionEnabled = 1
	}

	
}

}
def Xform "Xform_331"(){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Object_331" (
			prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
		)
{
    matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 2.220446049250313e-18, -0.010000000000000002, 0), (0, 0.010000000000000002, 2.220446049250313e-18, 0), (1.0986655171078672, 0.014162701087902019, -0.513343799481847, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
	uniform token physics:approximation = "convexDecomposition"

    rel material:binding = </World/Materials/Material_208>

	bool physics:kinematicEnabled = 0
	
		bool physics:rigidBodyEnabled = 1
		float physics:mass = 0.411
		float physxRigidBody:maxLinearVelocity = 1000
		float physxRigidBody:sleepThreshold = 0.5
		
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_276.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexDecomposition"
		bool physics:collisionEnabled = 1
	}

	
}

}
def Xform "Xform_347"(){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Object_347" (
			prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
		)
{
    matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.009999999999999946, 1.0331604236085415e-9, 0), (0, -1.0331604236085415e-9, 0.009999999999999946, 0), (-0.4507139134623238, 0.2748732309942463, 0.0000024127941742335675, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
	uniform token physics:approximation = "convexDecomposition"

    rel material:binding = </World/Materials/Material_215>

	bool physics:kinematicEnabled = 0
	
		bool physics:rigidBodyEnabled = 1
		float physics:mass = 0.411
		float physxRigidBody:maxLinearVelocity = 1000
		float physxRigidBody:sleepThreshold = 0.5
		
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_287.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexDecomposition"
		bool physics:collisionEnabled = 1
	}

	
}

}
def Xform "Xform_348"(){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Object_348" (
			prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
		)
{
    matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.009999999999999867, 1.6292068405476746e-9, 0), (0, -1.6292068405476746e-9, 0.009999999999999867, 0), (-0.46351812545604393, 0.2726943012403389, 0.064444825007069, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
	uniform token physics:approximation = "convexDecomposition"

    rel material:binding = </World/Materials/Material_216>

	bool physics:kinematicEnabled = 0
	
		bool physics:rigidBodyEnabled = 1
		float physics:mass = 0.411
		float physxRigidBody:maxLinearVelocity = 1000
		float physxRigidBody:sleepThreshold = 0.5
		
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_289.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexDecomposition"
		bool physics:collisionEnabled = 1
	}

	
}

}
def Xform "Xform_349"(){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Object_349" (
			prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
		)
{
    matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.009999999999999867, 1.6292068405476746e-9, 0), (0, -1.6292068405476746e-9, 0.009999999999999867, 0), (-0.46809733521508984, 0.31108266845234844, 0.07901816274888751, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
	uniform token physics:approximation = "convexDecomposition"

    rel material:binding = </World/Materials/Material_217>

	bool physics:kinematicEnabled = 0
	
		bool physics:rigidBodyEnabled = 1
		float physics:mass = 0.411
		float physxRigidBody:maxLinearVelocity = 1000
		float physxRigidBody:sleepThreshold = 0.5
		
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_291.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexDecomposition"
		bool physics:collisionEnabled = 1
	}

	
}

}
def Xform "Xform_350"(){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Object_350" (
			prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
		)
{
    matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.009999999999999867, 1.6292068405476746e-9, 0), (0, -1.6292068405476746e-9, 0.009999999999999867, 0), (-0.4356729228961613, 0.5734052848736526, 0.018543480671992713, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
	uniform token physics:approximation = "convexDecomposition"

    rel material:binding = </World/Materials/Material_218>

	bool physics:kinematicEnabled = 0
	
		bool physics:rigidBodyEnabled = 1
		float physics:mass = 0.411
		float physxRigidBody:maxLinearVelocity = 1000
		float physxRigidBody:sleepThreshold = 0.5
		
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_293.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexDecomposition"
		bool physics:collisionEnabled = 1
	}

	
}

}
def Xform "Xform_351"(){
			matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
			uniform token[] xformOpOrder = ["xformOp:transform"]
def Xform "Object_351" (
			prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxConvexDecompositionCollisionAPI", "PhysxJointAPI"]
		)
{
    matrix4d xformOp:transform = ( (0.01, 0, 0, 0), (0, 0.009999999999999867, 1.6292068405476746e-9, 0), (0, -1.6292068405476746e-9, 0.009999999999999867, 0), (-0.45850527796843504, 0.5888935121458112, 0.07462234596542372, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]
	uniform token physics:approximation = "convexDecomposition"

    rel material:binding = </World/Materials/Material_219>

	bool physics:kinematicEnabled = 0
	
		bool physics:rigidBodyEnabled = 1
		float physics:mass = 0.411
		float physxRigidBody:maxLinearVelocity = 1000
		float physxRigidBody:sleepThreshold = 0.5
		
    
    over "Geometry" (
		prepend references = @./geometries/Geometry_295.usd@</Geometry>
	)
	{
		uniform token physics:approximation = "convexDecomposition"
		bool physics:collisionEnabled = 1
	}

	
}

}
def "Materials"
{

    def Material "Material_109"(
		prepend apiSchemas = ["PhysicsMaterialAPI"]
	)
    {
		token outputs:surface.connect = </World/Materials/Material_109/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"
		float physics:dynamicFriction = 0.5
		float physics:restitution = 0
		float physics:staticFriction = 0.5

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor.connect = </World/Materials/Material_109/Texture_15_diffuse.outputs:rgb>
            float inputs:roughness = 1
            float inputs:metallic = 0
            float inputs:opacity = 1
            float inputs:clearcoat = 0
            float inputs:clearcoatRoughness = 0
            float inputs:ior = 1.5
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }



        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </World/Materials/Material_109.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }


        def Shader "Transform2d_diffuse" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_109/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_15_diffuse"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_15_ffffff.png@
            float2 inputs:st.connect = </World/Materials/Material_109/Transform2d_diffuse.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

    }

    def Material "Material_184"(
		prepend apiSchemas = ["PhysicsMaterialAPI"]
	)
    {
		token outputs:surface.connect = </World/Materials/Material_184/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"
		float physics:dynamicFriction = 0.5
		float physics:restitution = 0
		float physics:staticFriction = 0.5

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor.connect = </World/Materials/Material_184/Texture_19_diffuse.outputs:rgb>
            normal3f inputs:normal.connect = </World/Materials/Material_184/Texture_21_normal.outputs:rgb>
            float inputs:roughness.connect = </World/Materials/Material_184/Texture_20_roughness.outputs:g>
            float inputs:metallic.connect = </World/Materials/Material_184/Texture_20_metallic.outputs:b>
            float inputs:opacity = 1
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }



        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </World/Materials/Material_184.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }


        def Shader "Transform2d_diffuse" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_184/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_19_diffuse"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_19_ffffff.png@
            float2 inputs:st.connect = </World/Materials/Material_184/Transform2d_diffuse.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_normal" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_184/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_21_normal"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_21.png@
            float2 inputs:st.connect = </World/Materials/Material_184/Transform2d_normal.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_roughness" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_184/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_20_roughness"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_20.png@
            float2 inputs:st.connect = </World/Materials/Material_184/Transform2d_roughness.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_metallic" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_184/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_20_metallic"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_20.png@
            float2 inputs:st.connect = </World/Materials/Material_184/Transform2d_metallic.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

    }

    def Material "Material_185"(
		prepend apiSchemas = ["PhysicsMaterialAPI"]
	)
    {
		token outputs:surface.connect = </World/Materials/Material_185/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"
		float physics:dynamicFriction = 0.5
		float physics:restitution = 0
		float physics:staticFriction = 0.5

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor.connect = </World/Materials/Material_185/Texture_22_diffuse.outputs:rgb>
            normal3f inputs:normal.connect = </World/Materials/Material_185/Texture_24_normal.outputs:rgb>
            float inputs:roughness.connect = </World/Materials/Material_185/Texture_23_roughness.outputs:g>
            float inputs:metallic.connect = </World/Materials/Material_185/Texture_23_metallic.outputs:b>
            float inputs:opacity = 1
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }



        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </World/Materials/Material_185.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }


        def Shader "Transform2d_diffuse" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_185/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_22_diffuse"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_22_ffffff.png@
            float2 inputs:st.connect = </World/Materials/Material_185/Transform2d_diffuse.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_normal" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_185/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_24_normal"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_24.png@
            float2 inputs:st.connect = </World/Materials/Material_185/Transform2d_normal.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_roughness" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_185/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_23_roughness"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_23.png@
            float2 inputs:st.connect = </World/Materials/Material_185/Transform2d_roughness.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_metallic" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_185/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_23_metallic"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_23.png@
            float2 inputs:st.connect = </World/Materials/Material_185/Transform2d_metallic.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

    }

    def Material "Material_188"(
		prepend apiSchemas = ["PhysicsMaterialAPI"]
	)
    {
		token outputs:surface.connect = </World/Materials/Material_188/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"
		float physics:dynamicFriction = 0.5
		float physics:restitution = 0
		float physics:staticFriction = 0.5

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor.connect = </World/Materials/Material_188/Texture_22_diffuse.outputs:rgb>
            normal3f inputs:normal.connect = </World/Materials/Material_188/Texture_24_normal.outputs:rgb>
            float inputs:roughness.connect = </World/Materials/Material_188/Texture_23_roughness.outputs:g>
            float inputs:metallic.connect = </World/Materials/Material_188/Texture_23_metallic.outputs:b>
            float inputs:opacity = 1
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }



        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </World/Materials/Material_188.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }


        def Shader "Transform2d_diffuse" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_188/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_22_diffuse"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_22_ffffff.png@
            float2 inputs:st.connect = </World/Materials/Material_188/Transform2d_diffuse.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_normal" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_188/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_24_normal"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_24.png@
            float2 inputs:st.connect = </World/Materials/Material_188/Transform2d_normal.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_roughness" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_188/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_23_roughness"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_23.png@
            float2 inputs:st.connect = </World/Materials/Material_188/Transform2d_roughness.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_metallic" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_188/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_23_metallic"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_23.png@
            float2 inputs:st.connect = </World/Materials/Material_188/Transform2d_metallic.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

    }

    def Material "Material_190"(
		prepend apiSchemas = ["PhysicsMaterialAPI"]
	)
    {
		token outputs:surface.connect = </World/Materials/Material_190/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"
		float physics:dynamicFriction = 0.5
		float physics:restitution = 0
		float physics:staticFriction = 0.5

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.25821874435659575, 0.25821874435659575, 0.25821874435659575)
            float inputs:roughness = 0.12912565716535915
            float inputs:metallic = 0.7967553290557222
            float inputs:opacity = 1
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }



        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </World/Materials/Material_190.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }



    }

    def Material "Material_191"(
		prepend apiSchemas = ["PhysicsMaterialAPI"]
	)
    {
		token outputs:surface.connect = </World/Materials/Material_191/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"
		float physics:dynamicFriction = 0.5
		float physics:restitution = 0
		float physics:staticFriction = 0.5

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor.connect = </World/Materials/Material_191/Texture_22_diffuse.outputs:rgb>
            normal3f inputs:normal.connect = </World/Materials/Material_191/Texture_24_normal.outputs:rgb>
            float inputs:roughness.connect = </World/Materials/Material_191/Texture_23_roughness.outputs:g>
            float inputs:metallic.connect = </World/Materials/Material_191/Texture_23_metallic.outputs:b>
            float inputs:opacity = 1
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }



        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </World/Materials/Material_191.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }


        def Shader "Transform2d_diffuse" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_191/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_22_diffuse"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_22_ffffff.png@
            float2 inputs:st.connect = </World/Materials/Material_191/Transform2d_diffuse.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_normal" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_191/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_24_normal"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_24.png@
            float2 inputs:st.connect = </World/Materials/Material_191/Transform2d_normal.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_roughness" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_191/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_23_roughness"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_23.png@
            float2 inputs:st.connect = </World/Materials/Material_191/Transform2d_roughness.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_metallic" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_191/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_23_metallic"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_23.png@
            float2 inputs:st.connect = </World/Materials/Material_191/Transform2d_metallic.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

    }

    def Material "Material_196"(
		prepend apiSchemas = ["PhysicsMaterialAPI"]
	)
    {
		token outputs:surface.connect = </World/Materials/Material_196/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"
		float physics:dynamicFriction = 0.5
		float physics:restitution = 0
		float physics:staticFriction = 0.5

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor.connect = </World/Materials/Material_196/Texture_25_diffuse.outputs:rgb>
            normal3f inputs:normal.connect = </World/Materials/Material_196/Texture_27_normal.outputs:rgb>
            float inputs:occlusion.connect = </World/Materials/Material_196/Texture_26_occlusion.outputs:r>
            float inputs:roughness.connect = </World/Materials/Material_196/Texture_26_roughness.outputs:g>
            float inputs:metallic.connect = </World/Materials/Material_196/Texture_26_metallic.outputs:b>
            float inputs:opacity = 1
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }



        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </World/Materials/Material_196.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }


        def Shader "Transform2d_diffuse" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_196/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_25_diffuse"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_25_ffffff.png@
            float2 inputs:st.connect = </World/Materials/Material_196/Transform2d_diffuse.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_normal" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_196/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_27_normal"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_27.png@
            float2 inputs:st.connect = </World/Materials/Material_196/Transform2d_normal.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_occlusion" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_196/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_26_occlusion"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_26.png@
            float2 inputs:st.connect = </World/Materials/Material_196/Transform2d_occlusion.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_roughness" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_196/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_26_roughness"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_26.png@
            float2 inputs:st.connect = </World/Materials/Material_196/Transform2d_roughness.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_metallic" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_196/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_26_metallic"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_26.png@
            float2 inputs:st.connect = </World/Materials/Material_196/Transform2d_metallic.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

    }

    def Material "Material_197"(
		prepend apiSchemas = ["PhysicsMaterialAPI"]
	)
    {
		token outputs:surface.connect = </World/Materials/Material_197/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"
		float physics:dynamicFriction = 0.5
		float physics:restitution = 0
		float physics:staticFriction = 0.5

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor.connect = </World/Materials/Material_197/Texture_28_diffuse.outputs:rgb>
            normal3f inputs:normal.connect = </World/Materials/Material_197/Texture_30_normal.outputs:rgb>
            float inputs:occlusion.connect = </World/Materials/Material_197/Texture_29_occlusion.outputs:r>
            float inputs:roughness.connect = </World/Materials/Material_197/Texture_29_roughness.outputs:g>
            float inputs:metallic.connect = </World/Materials/Material_197/Texture_29_metallic.outputs:b>
            float inputs:opacity = 1
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }



        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </World/Materials/Material_197.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }


        def Shader "Transform2d_diffuse" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_197/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_28_diffuse"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_28_ffffff.png@
            float2 inputs:st.connect = </World/Materials/Material_197/Transform2d_diffuse.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_normal" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_197/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_30_normal"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_30.png@
            float2 inputs:st.connect = </World/Materials/Material_197/Transform2d_normal.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_occlusion" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_197/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_29_occlusion"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_29.png@
            float2 inputs:st.connect = </World/Materials/Material_197/Transform2d_occlusion.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_roughness" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_197/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_29_roughness"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_29.png@
            float2 inputs:st.connect = </World/Materials/Material_197/Transform2d_roughness.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_metallic" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_197/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_29_metallic"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_29.png@
            float2 inputs:st.connect = </World/Materials/Material_197/Transform2d_metallic.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

    }

    def Material "Material_198"(
		prepend apiSchemas = ["PhysicsMaterialAPI"]
	)
    {
		token outputs:surface.connect = </World/Materials/Material_198/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"
		float physics:dynamicFriction = 0.5
		float physics:restitution = 0
		float physics:staticFriction = 0.5

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor.connect = </World/Materials/Material_198/Texture_28_diffuse.outputs:rgb>
            normal3f inputs:normal.connect = </World/Materials/Material_198/Texture_30_normal.outputs:rgb>
            float inputs:occlusion.connect = </World/Materials/Material_198/Texture_29_occlusion.outputs:r>
            float inputs:roughness.connect = </World/Materials/Material_198/Texture_29_roughness.outputs:g>
            float inputs:metallic.connect = </World/Materials/Material_198/Texture_29_metallic.outputs:b>
            float inputs:opacity = 1
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }



        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </World/Materials/Material_198.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }


        def Shader "Transform2d_diffuse" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_198/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_28_diffuse"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_28_ffffff.png@
            float2 inputs:st.connect = </World/Materials/Material_198/Transform2d_diffuse.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_normal" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_198/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_30_normal"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_30.png@
            float2 inputs:st.connect = </World/Materials/Material_198/Transform2d_normal.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_occlusion" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_198/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_29_occlusion"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_29.png@
            float2 inputs:st.connect = </World/Materials/Material_198/Transform2d_occlusion.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_roughness" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_198/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_29_roughness"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_29.png@
            float2 inputs:st.connect = </World/Materials/Material_198/Transform2d_roughness.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_metallic" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_198/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_29_metallic"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_29.png@
            float2 inputs:st.connect = </World/Materials/Material_198/Transform2d_metallic.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

    }

    def Material "Material_199"(
		prepend apiSchemas = ["PhysicsMaterialAPI"]
	)
    {
		token outputs:surface.connect = </World/Materials/Material_199/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"
		float physics:dynamicFriction = 0.5
		float physics:restitution = 0
		float physics:staticFriction = 0.5

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor.connect = </World/Materials/Material_199/Texture_28_diffuse.outputs:rgb>
            normal3f inputs:normal.connect = </World/Materials/Material_199/Texture_30_normal.outputs:rgb>
            float inputs:occlusion.connect = </World/Materials/Material_199/Texture_29_occlusion.outputs:r>
            float inputs:roughness.connect = </World/Materials/Material_199/Texture_29_roughness.outputs:g>
            float inputs:metallic.connect = </World/Materials/Material_199/Texture_29_metallic.outputs:b>
            float inputs:opacity = 1
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }



        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </World/Materials/Material_199.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }


        def Shader "Transform2d_diffuse" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_199/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_28_diffuse"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_28_ffffff.png@
            float2 inputs:st.connect = </World/Materials/Material_199/Transform2d_diffuse.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_normal" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_199/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_30_normal"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_30.png@
            float2 inputs:st.connect = </World/Materials/Material_199/Transform2d_normal.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_occlusion" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_199/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_29_occlusion"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_29.png@
            float2 inputs:st.connect = </World/Materials/Material_199/Transform2d_occlusion.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_roughness" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_199/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_29_roughness"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_29.png@
            float2 inputs:st.connect = </World/Materials/Material_199/Transform2d_roughness.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

        def Shader "Transform2d_metallic" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_199/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_29_metallic"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_29.png@
            float2 inputs:st.connect = </World/Materials/Material_199/Transform2d_metallic.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

    }

    def Material "Material_206"(
		prepend apiSchemas = ["PhysicsMaterialAPI"]
	)
    {
		token outputs:surface.connect = </World/Materials/Material_206/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"
		float physics:dynamicFriction = 0.5
		float physics:restitution = 0
		float physics:staticFriction = 0.5

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor.connect = </World/Materials/Material_206/Texture_31_diffuse.outputs:rgb>
            float inputs:roughness = 0.8537945923
            float inputs:metallic = 0
            float inputs:opacity = 1
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }



        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </World/Materials/Material_206.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }


        def Shader "Transform2d_diffuse" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_206/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_31_diffuse"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_31_ffffff.png@
            float2 inputs:st.connect = </World/Materials/Material_206/Transform2d_diffuse.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

    }

    def Material "Material_207"(
		prepend apiSchemas = ["PhysicsMaterialAPI"]
	)
    {
		token outputs:surface.connect = </World/Materials/Material_207/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"
		float physics:dynamicFriction = 0.5
		float physics:restitution = 0
		float physics:staticFriction = 0.5

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor.connect = </World/Materials/Material_207/Texture_32_diffuse.outputs:rgb>
            float inputs:roughness = 0.8377747757
            float inputs:metallic = 0
            float inputs:opacity = 1
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }



        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </World/Materials/Material_207.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }


        def Shader "Transform2d_diffuse" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_207/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_32_diffuse"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_32_ffffff.png@
            float2 inputs:st.connect = </World/Materials/Material_207/Transform2d_diffuse.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

    }

    def Material "Material_208"(
		prepend apiSchemas = ["PhysicsMaterialAPI"]
	)
    {
		token outputs:surface.connect = </World/Materials/Material_208/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"
		float physics:dynamicFriction = 0.5
		float physics:restitution = 0
		float physics:staticFriction = 0.5

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor.connect = </World/Materials/Material_208/Texture_32_diffuse.outputs:rgb>
            float inputs:roughness = 0.8377747757
            float inputs:metallic = 0
            float inputs:opacity = 1
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }



        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </World/Materials/Material_208.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }


        def Shader "Transform2d_diffuse" (
            sdrMetadata = {
                string role = "math"
            }
        )
        {
            uniform token info:id = "UsdTransform2d"
            float2 inputs:in.connect = </World/Materials/Material_208/uvReader_st.outputs:result>
            float2 inputs:scale = (1, 1)
            float2 inputs:translation = (0, 0)
            float2 outputs:result
        }

        def Shader "Texture_32_diffuse"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @textures/Texture_32_ffffff.png@
            float2 inputs:st.connect = </World/Materials/Material_208/Transform2d_diffuse.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:r
            float outputs:g
            float outputs:b
            float3 outputs:rgb
            
        }

    }

    def Material "Material_215"(
		prepend apiSchemas = ["PhysicsMaterialAPI"]
	)
    {
		token outputs:surface.connect = </World/Materials/Material_215/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"
		float physics:dynamicFriction = 0.5
		float physics:restitution = 0
		float physics:staticFriction = 0.5

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.11106511231140416, 0.03395738683722323, 0)
            float inputs:roughness = 0
            float inputs:metallic = 0.0626905487804878
            float inputs:opacity = 1
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }



        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </World/Materials/Material_215.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }



    }

    def Material "Material_216"(
		prepend apiSchemas = ["PhysicsMaterialAPI"]
	)
    {
		token outputs:surface.connect = </World/Materials/Material_216/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"
		float physics:dynamicFriction = 0.5
		float physics:restitution = 0
		float physics:staticFriction = 0.5

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.11106511231140416, 0.03395738683722323, 0)
            float inputs:roughness = 0
            float inputs:metallic = 0.0626905487804878
            float inputs:opacity = 1
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }



        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </World/Materials/Material_216.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }



    }

    def Material "Material_217"(
		prepend apiSchemas = ["PhysicsMaterialAPI"]
	)
    {
		token outputs:surface.connect = </World/Materials/Material_217/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"
		float physics:dynamicFriction = 0.5
		float physics:restitution = 0
		float physics:staticFriction = 0.5

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.8, 0.52549, 0.0470588)
            float inputs:roughness = 0.7090320121951219
            float inputs:metallic = 1
            float inputs:opacity = 1
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }



        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </World/Materials/Material_217.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }



    }

    def Material "Material_218"(
		prepend apiSchemas = ["PhysicsMaterialAPI"]
	)
    {
		token outputs:surface.connect = </World/Materials/Material_218/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"
		float physics:dynamicFriction = 0.5
		float physics:restitution = 0
		float physics:staticFriction = 0.5

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.11106511231140416, 0.03395738683722323, 0)
            float inputs:roughness = 0
            float inputs:metallic = 0.0626905487804878
            float inputs:opacity = 1
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }



        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </World/Materials/Material_218.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }



    }

    def Material "Material_219"(
		prepend apiSchemas = ["PhysicsMaterialAPI"]
	)
    {
		token outputs:surface.connect = </World/Materials/Material_219/PreviewSurface.outputs:surface>
        token inputs:frame:stPrimvarName = "st"
		float physics:dynamicFriction = 0.5
		float physics:restitution = 0
		float physics:staticFriction = 0.5

        def Shader "PreviewSurface"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (0.8, 0.52549, 0.0470588)
            float inputs:roughness = 0.7090320121951219
            float inputs:metallic = 1
            float inputs:opacity = 1
            int inputs:useSpecularWorkflow = 0
            token outputs:surface
        }



        def Shader "uvReader_st"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname.connect = </World/Materials/Material_219.inputs:frame:stPrimvarName>
            float2 inputs:fallback = (0.0, 0.0)
            float2 outputs:result
        }



    }

}

}
